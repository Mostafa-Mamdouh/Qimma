// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PRJ.DataAccess.MSSQL;

#nullable disable

namespace PRJ.DataAccess.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    [Migration("20230207113336_nuclaermodify")]
    partial class nuclaermodify
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PRJ.Domain.Entities.AmanIntegrationEntities.LicenseInventoryEntities.LicenseGenerators", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("AmanOrgId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("LicenseInventoryId")
                        .HasColumnType("int");

                    b.Property<int?>("LicenseInventoryLimitsLicenseInventoryId")
                        .HasColumnType("int");

                    b.Property<double>("MaximumEnergy")
                        .HasColumnType("float");

                    b.Property<double>("MaximumNumberOfEquipment")
                        .HasColumnType("float");

                    b.Property<double>("MaximumTubeCurrent")
                        .HasColumnType("float");

                    b.Property<double>("MaximumVoltage")
                        .HasColumnType("float");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<double>("PurposeOfUse")
                        .HasColumnType("float");

                    b.Property<int?>("SourceUsedIn")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AmanOrgId")
                        .IsUnique()
                        .HasFilter("[AmanOrgId] IS NOT NULL");

                    b.HasIndex("LicenseInventoryLimitsLicenseInventoryId");

                    b.HasIndex("SourceUsedIn");

                    b.ToTable("LicenseGenerators");
                });

            modelBuilder.Entity("PRJ.Domain.Entities.AmanIntegrationEntities.LicenseInventoryEntities.LicenseSealedSources", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("AmanOrgId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("LicenseInventoryId")
                        .HasColumnType("int");

                    b.Property<int?>("LicenseInventoryLimitsLicenseInventoryId")
                        .HasColumnType("int");

                    b.Property<double>("MaximumRadioactivity")
                        .HasColumnType("float");

                    b.Property<int?>("MaximumRadioactivityUnit")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("NumberOfSources")
                        .HasColumnType("int");

                    b.Property<string>("PurposeOfUse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Radionuclide")
                        .HasColumnType("int");

                    b.Property<int?>("SourceUsedIn")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AmanOrgId")
                        .IsUnique()
                        .HasFilter("[AmanOrgId] IS NOT NULL");

                    b.HasIndex("LicenseInventoryLimitsLicenseInventoryId");

                    b.HasIndex("MaximumRadioactivityUnit");

                    b.HasIndex("Radionuclide");

                    b.HasIndex("SourceUsedIn");

                    b.ToTable("LicenseSealedSources");
                });

            modelBuilder.Entity("PRJ.Domain.Entities.AmanIntegrationEntities.LicenseInventoryEntities.LicenseUnSealedSources", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("AmanOrgId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("LicenseInventoryId")
                        .HasColumnType("int");

                    b.Property<int?>("LicenseInventoryLimitsLicenseInventoryId")
                        .HasColumnType("int");

                    b.Property<double>("MaximumRadioactivity")
                        .HasColumnType("float");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("NumberOfSources")
                        .HasColumnType("int");

                    b.Property<int?>("PhysicalForm")
                        .HasColumnType("int");

                    b.Property<string>("PurposeOfUse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Radionuclide")
                        .HasColumnType("int");

                    b.Property<int?>("SourceUsedIn")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AmanOrgId")
                        .IsUnique()
                        .HasFilter("[AmanOrgId] IS NOT NULL");

                    b.HasIndex("LicenseInventoryLimitsLicenseInventoryId");

                    b.HasIndex("PhysicalForm");

                    b.HasIndex("Radionuclide");

                    b.HasIndex("SourceUsedIn");

                    b.ToTable("LicenseUnSealedSources");
                });

            modelBuilder.Entity("PRJ.Domain.Entities.AmanIntegrationEntities.LicenseInventoryEntities.VUnsealedSources", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("AmanOrgId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("LicenseInventoryId")
                        .HasColumnType("int");

                    b.Property<int?>("LicenseInventoryLimitsLicenseInventoryId")
                        .HasColumnType("int");

                    b.Property<double>("MaximumRadioactivityInTheWorkPlace")
                        .HasColumnType("float");

                    b.Property<int?>("MaximumRadioactivityInTheWorkPlaceUnit")
                        .HasColumnType("int");

                    b.Property<double>("MaximumRadioactivityPerSource")
                        .HasColumnType("float");

                    b.Property<int?>("MaximumRadioactivityPerSourceUnit")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("NumberOfSources")
                        .HasColumnType("int");

                    b.Property<int?>("PhysicalForm")
                        .HasColumnType("int");

                    b.Property<string>("PurposeOfUse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Radionuclide")
                        .HasColumnType("int");

                    b.Property<int?>("SourceUsedIn")
                        .HasColumnType("int");

                    b.Property<int?>("UnsealedSourceType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AmanOrgId")
                        .IsUnique()
                        .HasFilter("[AmanOrgId] IS NOT NULL");

                    b.HasIndex("LicenseInventoryLimitsLicenseInventoryId");

                    b.HasIndex("MaximumRadioactivityInTheWorkPlaceUnit");

                    b.HasIndex("MaximumRadioactivityPerSourceUnit");

                    b.HasIndex("PhysicalForm");

                    b.HasIndex("Radionuclide");

                    b.HasIndex("SourceUsedIn");

                    b.HasIndex("UnsealedSourceType");

                    b.ToTable("LicenseVUnsealedSources");
                });

            modelBuilder.Entity("PRJ.Domain.Entities.AmanIntegrationEntities.LicenseInventoryLimits", b =>
                {
                    b.Property<int>("LicenseInventoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LicenseInventoryId"), 1L, 1);

                    b.Property<int?>("AmanOrgId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("FacilityId")
                        .HasColumnType("int");

                    b.Property<int>("LicenseMasterId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("LicenseInventoryId");

                    b.HasIndex("AmanOrgId")
                        .IsUnique()
                        .HasFilter("[AmanOrgId] IS NOT NULL");

                    b.HasIndex("FacilityId");

                    b.HasIndex("LicenseMasterId");

                    b.ToTable("LicenseInventoryLimits");
                });

            modelBuilder.Entity("PRJ.Domain.Entities.AmanIntegrationEntities.PermitInventoryEntities.PermitGenerators", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("AmanOrgId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EquipmentType")
                        .HasColumnType("int");

                    b.Property<int?>("ManufactuerName")
                        .HasColumnType("int");

                    b.Property<double>("MaximumEnergy")
                        .HasColumnType("float");

                    b.Property<double>("MaximumTubeCurrent")
                        .HasColumnType("float");

                    b.Property<double>("MaximumVoltage")
                        .HasColumnType("float");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("PermitInventoryId")
                        .HasColumnType("int");

                    b.Property<int?>("PermitInventoryLimitsPermitInventoryId")
                        .HasColumnType("int");

                    b.Property<string>("SerialNo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AmanOrgId")
                        .IsUnique()
                        .HasFilter("[AmanOrgId] IS NOT NULL");

                    b.HasIndex("EquipmentType");

                    b.HasIndex("ManufactuerName");

                    b.HasIndex("PermitInventoryLimitsPermitInventoryId");

                    b.ToTable("PermitGenerators");
                });

            modelBuilder.Entity("PRJ.Domain.Entities.AmanIntegrationEntities.PermitInventoryEntities.PermitNuclearSources", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("AmanOrgId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EquipmentType")
                        .HasColumnType("int");

                    b.Property<int?>("ManufactuerName")
                        .HasColumnType("int");

                    b.Property<string>("Model")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("PermitInventoryId")
                        .HasColumnType("int");

                    b.Property<int?>("PermitInventoryLimitsPermitInventoryId")
                        .HasColumnType("int");

                    b.Property<string>("SerialNo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AmanOrgId")
                        .IsUnique()
                        .HasFilter("[AmanOrgId] IS NOT NULL");

                    b.HasIndex("EquipmentType");

                    b.HasIndex("ManufactuerName");

                    b.HasIndex("PermitInventoryLimitsPermitInventoryId");

                    b.ToTable("PermitNuclearSources");
                });

            modelBuilder.Entity("PRJ.Domain.Entities.AmanIntegrationEntities.PermitInventoryEntities.PermitSealedSources", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("AmanOrgId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ManufactuerName")
                        .HasColumnType("int");

                    b.Property<double>("MaximumRadioactivity")
                        .HasColumnType("float");

                    b.Property<int?>("MaximumRadioactivityUnit")
                        .HasColumnType("int");

                    b.Property<string>("Model")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("PermitInventoryId")
                        .HasColumnType("int");

                    b.Property<int?>("PermitInventoryLimitsPermitInventoryId")
                        .HasColumnType("int");

                    b.Property<int?>("Radionuclide")
                        .HasColumnType("int");

                    b.Property<string>("SerialNo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AmanOrgId")
                        .IsUnique()
                        .HasFilter("[AmanOrgId] IS NOT NULL");

                    b.HasIndex("ManufactuerName");

                    b.HasIndex("MaximumRadioactivityUnit");

                    b.HasIndex("PermitInventoryLimitsPermitInventoryId");

                    b.HasIndex("Radionuclide");

                    b.ToTable("PermitSealedSources");
                });

            modelBuilder.Entity("PRJ.Domain.Entities.AmanIntegrationEntities.PermitInventoryEntities.PermitUnSealedSources", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("AmanOrgId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<double>("CurrentActivity")
                        .HasColumnType("float");

                    b.Property<int?>("CurrentActivityUnit")
                        .HasColumnType("int");

                    b.Property<int?>("ManufactuerName")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("PermitInventoryId")
                        .HasColumnType("int");

                    b.Property<int?>("PermitInventoryLimitsPermitInventoryId")
                        .HasColumnType("int");

                    b.Property<int?>("PhysicalForm")
                        .HasColumnType("int");

                    b.Property<int?>("Radionuclide")
                        .HasColumnType("int");

                    b.Property<string>("SerialNo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AmanOrgId")
                        .IsUnique()
                        .HasFilter("[AmanOrgId] IS NOT NULL");

                    b.HasIndex("CurrentActivityUnit");

                    b.HasIndex("ManufactuerName");

                    b.HasIndex("PermitInventoryLimitsPermitInventoryId");

                    b.HasIndex("PhysicalForm");

                    b.HasIndex("Radionuclide");

                    b.ToTable("PermitUnSealedSources");
                });

            modelBuilder.Entity("PRJ.Domain.Entities.AmanIntegrationEntities.PermitInventoryLimits", b =>
                {
                    b.Property<int>("PermitInventoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PermitInventoryId"), 1L, 1);

                    b.Property<int?>("AmanOrgId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("FacilityId")
                        .HasColumnType("int");

                    b.Property<int>("LicenseMasterId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("PermitMasterId")
                        .HasColumnType("int");

                    b.HasKey("PermitInventoryId");

                    b.HasIndex("AmanOrgId")
                        .IsUnique()
                        .HasFilter("[AmanOrgId] IS NOT NULL");

                    b.HasIndex("FacilityId");

                    b.HasIndex("LicenseMasterId");

                    b.HasIndex("PermitMasterId");

                    b.ToTable("PermitInventoryLimits");
                });

            modelBuilder.Entity("PRJ.Domain.Entities.BasCities", b =>
                {
                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CityId"), 1L, 1);

                    b.Property<int?>("AmanOrgId")
                        .HasColumnType("int");

                    b.Property<string>("CityAbbrCode")
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.HasKey("CountryId", "CityId");

                    b.HasIndex("AmanOrgId")
                        .IsUnique()
                        .HasFilter("[AmanOrgId] IS NOT NULL");

                    b.ToTable("BasCities");
                });

            modelBuilder.Entity("PRJ.Domain.Entities.BasCountries", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CountryId"), 1L, 1);

                    b.Property<int?>("AmanOrgId")
                        .HasColumnType("int");

                    b.Property<string>("CountryCodeISO")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("CountryNameAr")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("CountryNameEn")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("NationalityNameFrn")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("NationalityNameNtv")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.HasKey("CountryId");

                    b.HasIndex("AmanOrgId")
                        .IsUnique()
                        .HasFilter("[AmanOrgId] IS NOT NULL");

                    b.ToTable("BasCountries");
                });

            modelBuilder.Entity("PRJ.Domain.Entities.Billing.ItemHierarchyStructure", b =>
                {
                    b.Property<string>("ItemStructureCode")
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<int?>("AmanOrgId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DefaultIssueAccountCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ItemStructureDesFrn")
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<string>("ItemStructureDesNtv")
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ParentStructure")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("StructureGeneralDetailFlag")
                        .HasColumnType("bit");

                    b.Property<int>("StructureLevelNum")
                        .HasColumnType("int");

                    b.HasKey("ItemStructureCode");

                    b.HasIndex("AmanOrgId")
                        .IsUnique()
                        .HasFilter("[AmanOrgId] IS NOT NULL");

                    b.ToTable("ItemHierarchyStructure");
                });

            modelBuilder.Entity("PRJ.Domain.Entities.Billing.ServiceItemPrice", b =>
                {
                    b.Property<int>("ServiceItemPriceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServiceItemPriceId"), 1L, 1);

                    b.Property<bool>("ActiveFlag")
                        .HasColumnType("bit");

                    b.Property<int?>("AmanOrgId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("ItemPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("LineNum")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("ServiceItemId")
                        .HasColumnType("int");

                    b.HasKey("ServiceItemPriceId");

                    b.HasIndex("AmanOrgId")
                        .IsUnique()
                        .HasFilter("[AmanOrgId] IS NOT NULL");

                    b.HasIndex("ServiceItemId");

                    b.ToTable("ServiceItemPrice");
                });

            modelBuilder.Entity("PRJ.Domain.Entities.Billing.ServiceItemProfile", b =>
                {
                    b.Property<int>("ServiceItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServiceItemId"), 1L, 1);

                    b.Property<bool>("ActiveFlag")
                        .HasColumnType("bit");

                    b.Property<int?>("AmanOrgId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("CurrentPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("IssueAccountCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ItemDesFrn")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ItemDesNtv")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ItemRefCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ItemStructureCode")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ItemStructureCode1")
                        .HasColumnType("nvarchar(120)");

                    b.Property<string>("ItemType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ItmQty")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("LicenseTerm")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("MultiStage")
                        .HasColumnType("bit");

                    b.HasKey("ServiceItemId");

                    b.HasIndex("AmanOrgId")
                        .IsUnique()
                        .HasFilter("[AmanOrgId] IS NOT NULL");

                    b.HasIndex("ItemStructureCode1");

                    b.ToTable("ServiceItemProfile");
                });

            modelBuilder.Entity("PRJ.Domain.Entities.BillingServiceTrn.BillingServiceTrnDetails", b =>
                {
                    b.Property<int?>("LineNum")
                        .HasColumnType("int");

                    b.Property<int>("TransactionID")
                        .HasColumnType("int");

                    b.Property<decimal>("BillableQty")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ItemPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ItemQty")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("LineRemarks")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("ServiceItemId")
                        .HasColumnType("int");

                    b.Property<decimal>("VatAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("VatIncluded")
                        .HasColumnType("bit");

                    b.Property<decimal>("VatPcntg")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("LineNum", "TransactionID");

                    b.HasIndex("TransactionID");

                    b.ToTable("BillingServiceTrnDetails");
                });

            modelBuilder.Entity("PRJ.Domain.Entities.BillingServiceTrn.BillingServiceTrnHeader", b =>
                {
                    b.Property<int>("TransactionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransactionID"), 1L, 1);

                    b.Property<int?>("AmanOrgId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("CurrencyCode")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("CustomerId")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("CustomerName")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<decimal>("ExRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("InvoiceBU")
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<string>("InvoiceCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("InvoiceDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("InvoiceSource")
                        .HasColumnType("int");

                    b.Property<string>("InvoiceType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("StatusFlag")
                        .HasColumnType("int");

                    b.Property<string>("TermsCode")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("TransactionRefNum")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("TrnRemarks")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("TransactionID");

                    b.HasIndex("AmanOrgId")
                        .IsUnique()
                        .HasFilter("[AmanOrgId] IS NOT NULL");

                    b.HasIndex("InvoiceBU");

                    b.HasIndex("InvoiceSource");

                    b.HasIndex("StatusFlag");

                    b.ToTable("BillingServiceTrnHeader");
                });

            modelBuilder.Entity("PRJ.Domain.Entities.CustomerProfile", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerId"), 1L, 1);

                    b.Property<bool>("ActiveFlag")
                        .HasMaxLength(50)
                        .HasColumnType("bit");

                    b.Property<int?>("AmanOrgId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerNameEn")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("RefCode")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("CustomerId");

                    b.HasIndex("AmanOrgId")
                        .IsUnique()
                        .HasFilter("[AmanOrgId] IS NOT NULL");

                    b.ToTable("CustomerProfile");
                });

            modelBuilder.Entity("PRJ.Domain.Entities.EntityProfile", b =>
                {
                    b.Property<int>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EntityId"), 1L, 1);

                    b.Property<DateTime?>("AmanInsertedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("AmanOrgId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmailId")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("EntityNameAr")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("EntityNameEn")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<int?>("EntityType")
                        .HasMaxLength(20)
                        .HasColumnType("int");

                    b.Property<string>("GovernmentID")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("MobileNo")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("PhoneNo")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("EntityId");

                    b.HasIndex("AmanOrgId")
                        .IsUnique()
                        .HasFilter("[AmanOrgId] IS NOT NULL");

                    b.HasIndex("EntityType");

                    b.ToTable("EntityProfile");
                });

            modelBuilder.Entity("PRJ.Domain.Entities.ExternalMaserUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CountryID")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstNameAr")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)")
                        .HasColumnOrder(1);

                    b.Property<string>("FirstNameEn")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)")
                        .HasColumnOrder(4);

                    b.Property<DateTime?>("GregorianBirthDate")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(12);

                    b.Property<DateTime?>("HijriBirthDate")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(13);

                    b.Property<string>("IqamaID")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnOrder(15);

                    b.Property<bool>("IsActiveUser")
                        .HasColumnType("bit")
                        .HasColumnOrder(7);

                    b.Property<string>("LastNameNameAr")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)")
                        .HasColumnOrder(3);

                    b.Property<string>("LastNameNameEn")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)")
                        .HasColumnOrder(6);

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("NationalID")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnOrder(14);

                    b.Property<int?>("Nationality")
                        .HasColumnType("int")
                        .HasColumnOrder(17);

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PassportNo")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnOrder(11);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<byte[]>("Picture")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("PictureContentType")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)")
                        .HasColumnOrder(9);

                    b.Property<string>("PictureName")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)")
                        .HasColumnOrder(10);

                    b.Property<string>("SecondNameAr")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)")
                        .HasColumnOrder(2);

                    b.Property<string>("SecondNameEn")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)")
                        .HasColumnOrder(5);

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserAlternatePhone")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnOrder(16);

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("UserTypeId")
                        .HasColumnType("int")
                        .HasColumnOrder(8);

                    b.HasKey("Id");

                    b.HasIndex("CountryID");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("PRJ.Domain.Entities.FacilityProfile", b =>
                {
                    b.Property<int>("FacilityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FacilityId"), 1L, 1);

                    b.Property<DateTime?>("AmanInsertedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("AmanOrgId")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EntityId")
                        .HasColumnType("int");

                    b.Property<string>("FacilityCode")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("FacilityNameAr")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("FacilityNameEn")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("Location")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("NationalAddress")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("Province")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FacilityId");

                    b.HasIndex("AmanOrgId")
                        .IsUnique()
                        .HasFilter("[AmanOrgId] IS NOT NULL");

                    b.HasIndex("EntityId");

                    b.ToTable("FacilityProfile");
                });

            modelBuilder.Entity("PRJ.Domain.Entities.InternalFieldPermission", b =>
                {
                    b.Property<int>("FieldPermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FieldPermissionId"), 1L, 1);

                    b.Property<int?>("AmanOrgId")
                        .HasColumnType("int");

                    b.Property<int>("AttributeId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("FieldId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("FieldPermissionId");

                    b.HasIndex("AmanOrgId")
                        .IsUnique()
                        .HasFilter("[AmanOrgId] IS NOT NULL");

                    b.HasIndex("FieldId");

                    b.ToTable("InternalFieldPermissions");
                });

            modelBuilder.Entity("PRJ.Domain.Entities.InternalRole", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"), 1L, 1);

                    b.Property<int?>("AmanOrgId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("RoleCode")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("RoleNameAr")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("RoleNameEn")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.HasKey("RoleId");

                    b.HasIndex("AmanOrgId")
                        .IsUnique()
                        .HasFilter("[AmanOrgId] IS NOT NULL");

                    b.ToTable("InternalRoles");
                });

            modelBuilder.Entity("PRJ.Domain.Entities.InternalScreen", b =>
                {
                    b.Property<int>("ScreenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ScreenId"), 1L, 1);

                    b.Property<int?>("AmanOrgId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ScreenCode")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("ScreenNameAr")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("ScreenNameEn")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.HasKey("ScreenId");

                    b.HasIndex("AmanOrgId")
                        .IsUnique()
                        .HasFilter("[AmanOrgId] IS NOT NULL");

                    b.ToTable("InternalScreens");
                });

            modelBuilder.Entity("PRJ.Domain.Entities.InternalScreenField", b =>
                {
                    b.Property<int>("FieldId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FieldId"), 1L, 1);

                    b.Property<int?>("AmanOrgId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("FieldDescAr")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("FieldDescEn")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("FieldFormat")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<int>("FieldType")
                        .HasColumnType("int");

                    b.Property<int?>("LookupSetId")
                        .HasColumnType("int");

                    b.Property<int?>("LovId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("ScreenId")
                        .HasColumnType("int");

                    b.HasKey("FieldId");

                    b.HasIndex("AmanOrgId")
                        .IsUnique()
                        .HasFilter("[AmanOrgId] IS NOT NULL");

                    b.HasIndex("LookupSetId");

                    b.HasIndex("LovId");

                    b.HasIndex("ScreenId");

                    b.ToTable("InternalScreenFields");
                });

            modelBuilder.Entity("PRJ.Domain.Entities.InternalScreenRole", b =>
                {
                    b.Property<int>("ScreenRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ScreenRoleId"), 1L, 1);

                    b.Property<int?>("AmanOrgId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Delete")
                        .HasColumnType("bit");

                    b.Property<bool>("Insert")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Query")
                        .HasColumnType("bit");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("ScreenId")
                        .HasColumnType("int");

                    b.Property<int>("ScreenOrder")
                        .HasColumnType("int");

                    b.Property<bool>("Update")
                        .HasColumnType("bit");

                    b.HasKey("ScreenRoleId");

                    b.HasIndex("AmanOrgId")
                        .IsUnique()
                        .HasFilter("[AmanOrgId] IS NOT NULL");

                    b.HasIndex("RoleId");

                    b.HasIndex("ScreenId");

                    b.ToTable("InternalScreenRoles");
                });

            modelBuilder.Entity("PRJ.Domain.Entities.ItemSourceFiles", b =>
                {
                    b.Property<int>("ItemSourceFileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ItemSourceFileId"), 1L, 1);

                    b.Property<int?>("AmanOrgId")
                        .HasColumnType("int");

                    b.Property<int>("AttachmentType")
                        .HasColumnType("int");

                    b.Property<string>("ContentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("FileBytes")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FileNum")
                        .HasColumnType("int");

                    b.Property<string>("FileOriginalName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FileSize")
                        .HasColumnType("int");

                    b.Property<bool?>("ForShield")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("SourceId")
                        .HasColumnType("int");

                    b.HasKey("ItemSourceFileId");

                    b.HasIndex("AmanOrgId")
                        .IsUnique()
                        .HasFilter("[AmanOrgId] IS NOT NULL");

                    b.HasIndex("SourceId");

                    b.ToTable("ItemSourceFiles");
                });

            modelBuilder.Entity("PRJ.Domain.Entities.ItemSourceMsgHistory", b =>
                {
                    b.Property<int>("MsgId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MsgId"), 1L, 1);

                    b.Property<int?>("AmanOrgId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("MsgText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SourceId")
                        .HasColumnType("int");

                    b.HasKey("MsgId");

                    b.HasIndex("AmanOrgId")
                        .IsUnique()
                        .HasFilter("[AmanOrgId] IS NOT NULL");

                    b.HasIndex("SourceId");

                    b.ToTable("ItemSourceMsgHistory");
                });

            modelBuilder.Entity("PRJ.Domain.Entities.ItemSourceProfile", b =>
                {
                    b.Property<int>("SourceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SourceId"), 1L, 1);

                    b.Property<int?>("AmanOrgId")
                        .HasColumnType("int");

                    b.Property<int?>("AssociatedEquipment")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("CurrentTrnStatus")
                        .HasColumnType("int");

                    b.Property<int?>("EntityId")
                        .HasColumnType("int");

                    b.Property<int?>("FacilityId")
                        .HasColumnType("int");

                    b.Property<string>("FacilitySerialNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("InitialMass")
                        .HasColumnType("float");

                    b.Property<int?>("InitialMassUnit")
                        .HasColumnType("int");

                    b.Property<bool?>("IsShieldDU")
                        .HasColumnType("bit");

                    b.Property<int?>("LegalRepresentativesId")
                        .HasColumnType("int");

                    b.Property<int?>("LicenseId")
                        .HasColumnType("int");

                    b.Property<int?>("LicenseInventoryId")
                        .HasColumnType("int");

                    b.Property<int?>("ManufacturerCountryId")
                        .HasColumnType("int");

                    b.Property<int?>("ManufacturerId")
                        .HasColumnType("int");

                    b.Property<string>("ManufacturerSerialNo")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("NoCharacterizationCertificateFlag")
                        .HasColumnType("bit");

                    b.Property<bool>("NoCustomImportPermitFlag")
                        .HasColumnType("bit");

                    b.Property<bool>("NoImagesFlag")
                        .HasColumnType("bit");

                    b.Property<bool>("NoManufacturerCertificateFlag")
                        .HasColumnType("bit");

                    b.Property<bool>("NoShipperImportPermitFlag")
                        .HasColumnType("bit");

                    b.Property<bool>("NoSourceTagImageFlag")
                        .HasColumnType("bit");

                    b.Property<string>("NrrcId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NuclearMaterial")
                        .HasColumnType("int");

                    b.Property<int?>("PermitInventoryId")
                        .HasColumnType("int");

                    b.Property<int?>("PermitdetailsId")
                        .HasColumnType("int");

                    b.Property<int?>("PhysicalForm")
                        .HasColumnType("int");

                    b.Property<int?>("PractiseId")
                        .HasColumnType("int");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<int?>("SROId")
                        .HasColumnType("int");

                    b.Property<int?>("ShieldNuclearMaterialCode")
                        .HasColumnType("int");

                    b.Property<double?>("SourceActivity")
                        .HasColumnType("float");

                    b.Property<int?>("SourceActivityUnit")
                        .HasColumnType("int");

                    b.Property<int?>("SourceCategory")
                        .HasColumnType("int");

                    b.Property<string>("SourceModel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SourceType")
                        .HasColumnType("int");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<int>("TrnSourceId")
                        .HasColumnType("int");

                    b.HasKey("SourceId");

                    b.HasIndex("AmanOrgId")
                        .IsUnique()
                        .HasFilter("[AmanOrgId] IS NOT NULL");

                    b.HasIndex("AssociatedEquipment");

                    b.HasIndex("EntityId");

                    b.HasIndex("FacilityId");

                    b.HasIndex("InitialMassUnit");

                    b.HasIndex("LegalRepresentativesId");

                    b.HasIndex("LicenseId");

                    b.HasIndex("LicenseInventoryId");

                    b.HasIndex("ManufacturerCountryId");

                    b.HasIndex("ManufacturerId");

                    b.HasIndex("ManufacturerSerialNo")
                        .IsUnique()
                        .HasFilter("[ManufacturerSerialNo] IS NOT NULL");

                    b.HasIndex("NuclearMaterial");

                    b.HasIndex("PermitInventoryId");

                    b.HasIndex("PermitdetailsId");

                    b.HasIndex("PhysicalForm");

                    b.HasIndex("PractiseId");

                    b.HasIndex("SROId");

                    b.HasIndex("ShieldNuclearMaterialCode")
                        .IsUnique()
                        .HasFilter("[ShieldNuclearMaterialCode] IS NOT NULL");

                    b.HasIndex("SourceActivityUnit");

                    b.HasIndex("SourceCategory");

                    b.HasIndex("SourceType");

                    b.HasIndex("Status");

                    b.HasIndex("TrnSourceId")
                        .IsUnique();

                    b.ToTable("ItemSourceProfile");
                });

            modelBuilder.Entity("PRJ.Domain.Entities.ItemSourceRadionulcides", b =>
                {
                    b.Property<int>("ItemSourceRadionuclideId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ItemSourceRadionuclideId"), 1L, 1);

                    b.Property<int?>("AmanOrgId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<float>("InitialActivity")
                        .HasColumnType("real");

                    b.Property<int?>("InitialActivityUnit")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("RadionulcideId")
                        .HasColumnType("int");

                    b.Property<int>("SourceId")
                        .HasColumnType("int");

                    b.HasKey("ItemSourceRadionuclideId");

                    b.HasIndex("AmanOrgId")
                        .IsUnique()
                        .HasFilter("[AmanOrgId] IS NOT NULL");

                    b.HasIndex("InitialActivityUnit");

                    b.HasIndex("RadionulcideId");

                    b.HasIndex("SourceId");

                    b.ToTable("ItemSourceRadionulcides");
                });

            modelBuilder.Entity("PRJ.Domain.Entities.ItemSourceStatus", b =>
                {
                    b.Property<int>("ItemSourceStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ItemSourceStatusId"), 1L, 1);

                    b.Property<int?>("AmanOrgId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("StatusCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StatusNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StatusNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ItemSourceStatusId");

                    b.HasIndex("AmanOrgId")
                        .IsUnique()
                        .HasFilter("[AmanOrgId] IS NOT NULL");

                    b.ToTable("ItemSourceStatus");
                });

            modelBuilder.Entity("PRJ.Domain.Entities.ItemSourceStatusHistory", b =>
                {
                    b.Property<int>("StatusHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StatusHistoryId"), 1L, 1);

                    b.Property<int?>("AmanOrgId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ParentStatusId")
                        .HasColumnType("int");

                    b.Property<string>("Remarks")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("SourceId")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("StatusHistoryId");

                    b.HasIndex("AmanOrgId")
                        .IsUnique()
                        .HasFilter("[AmanOrgId] IS NOT NULL");

                    b.HasIndex("ParentStatusId");

                    b.HasIndex("SourceId");

                    b.HasIndex("StatusId");

                    b.ToTable("ItemSourceStatusHistory");
                });

            modelBuilder.Entity("PRJ.Domain.Entities.LegalRepresentativesProfile", b =>
                {
                    b.Property<int>("LegalRepresentativesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LegalRepresentativesId"), 1L, 1);

                    b.Property<DateTime?>("AmanInsertedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("AmanOrgId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("CurrentFacilities")
                        .HasColumnType("int");

                    b.Property<string>("EmailId")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("LegalRepresentativesNameAr")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("LegalRepresentativesNameEn")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("MobileNo")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("NationalID")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Note")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("PhoneNo")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Status")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Title")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.HasKey("LegalRepresentativesId");

                    b.HasIndex("AmanOrgId")
                        .IsUnique()
                        .HasFilter("[AmanOrgId] IS NOT NULL");

                    b.ToTable("LegalRepresentativesProfile");
                });

            modelBuilder.Entity("PRJ.Domain.Entities.LicenseProfile", b =>
                {
                    b.Property<int>("LicenseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LicenseId"), 1L, 1);

                    b.Property<DateTime?>("AmanInsertedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("AmanOrgId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EffectiveDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EntityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("FacilityId")
                        .HasColumnType("int");

                    b.Property<string>("LicenseActivities")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("LicenseCode")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("LicenseDescAr")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("LicenseDescEn")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<int?>("LicensePractices")
                        .HasColumnType("int");

                    b.Property<string>("LicenseVersionNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PractiseSector")
                        .HasColumnType("int");

                    b.HasKey("LicenseId");

                    b.HasIndex("AmanOrgId")
                        .IsUnique()
                        .HasFilter("[AmanOrgId] IS NOT NULL");

                    b.HasIndex("EntityId");

                    b.HasIndex("FacilityId");

                    b.HasIndex("LicensePractices");

                    b.HasIndex("PractiseSector");

                    b.ToTable("LicenseProfile");
                });

            modelBuilder.Entity("PRJ.Domain.Entities.ListOfValue", b =>
                {
                    b.Property<int>("LovId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LovId"), 1L, 1);

                    b.Property<int?>("AmanOrgId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("LovCode")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("LovNameAr")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("LovNameEn")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("SqlStatement")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.HasKey("LovId");

                    b.HasIndex("AmanOrgId")
                        .IsUnique()
                        .HasFilter("[AmanOrgId] IS NOT NULL");

                    b.ToTable("ListOfValues");
                });

            modelBuilder.Entity("PRJ.Domain.Entities.LookupSet", b =>
                {
                    b.Property<int>("LookupSetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LookupSetId"), 1L, 1);

                    b.Property<int?>("AmanOrgId")
                        .HasColumnType("int");

                    b.Property<string>("ClassName")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DisplayNameAr")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("DisplayNameEn")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("ExtraData1")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("ExtraData2")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("LookupSetId");

                    b.HasIndex("AmanOrgId")
                        .IsUnique()
                        .HasFilter("[AmanOrgId] IS NOT NULL");

                    b.ToTable("LookupSet");
                });

            modelBuilder.Entity("PRJ.Domain.Entities.LookupSetTerm", b =>
                {
                    b.Property<int>("LookupSetTermId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LookupSetTermId"), 1L, 1);

                    b.Property<int?>("AmanOrgId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DisplayNameAr")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("DisplayNameEn")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("ExtraData1")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("ExtraData2")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("LookupSetId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Value")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.HasKey("LookupSetTermId");

                    b.HasIndex("AmanOrgId")
                        .IsUnique()
                        .HasFilter("[AmanOrgId] IS NOT NULL");

                    b.HasIndex("LookupSetId", "AmanOrgId")
                        .IsUnique()
                        .HasFilter("[AmanOrgId] IS NOT NULL");

                    b.ToTable("LookupSetTerm");
                });

            modelBuilder.Entity("PRJ.Domain.Entities.ManufacturerMaster", b =>
                {
                    b.Property<int>("ManufacturerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ManufacturerId"), 1L, 1);

                    b.Property<string>("AddressLine1")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("AddressLine2")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("AddressLine3")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("AmanOrgId")
                        .HasColumnType("int");

                    b.Property<int>("City")
                        .HasColumnType("int");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmailId")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("Location")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ManufacturerDescAr")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("ManufacturerDescEn")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("MobileNo")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("POBox")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PhoneNo")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ZipCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("ManufacturerId");

                    b.HasIndex("AmanOrgId")
                        .IsUnique()
                        .HasFilter("[AmanOrgId] IS NOT NULL");

                    b.HasIndex("CountryId");

                    b.ToTable("ManufacturerMaster");
                });

            modelBuilder.Entity("PRJ.Domain.Entities.NRRCLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Exception")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Level")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LogEvent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Timestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("NRRCLogs");
                });

            modelBuilder.Entity("PRJ.Domain.Entities.NuclearMaterial.NuclearMaterial", b =>
                {
                    b.Property<int>("SourceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SourceId"), 1L, 1);

                    b.Property<int?>("AmanOrgId")
                        .HasColumnType("int");

                    b.Property<string>("ChemicalForm")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EntityId")
                        .HasColumnType("int");

                    b.Property<int?>("FacilityId")
                        .HasColumnType("int");

                    b.Property<string>("FacilitySerialNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsShield")
                        .HasColumnType("bit");

                    b.Property<int?>("LicenseId")
                        .HasColumnType("int");

                    b.Property<int?>("LicenseInventoryId")
                        .HasColumnType("int");

                    b.Property<int?>("ManufacturerCountryId")
                        .HasColumnType("int");

                    b.Property<int?>("ManufacturerId")
                        .HasColumnType("int");

                    b.Property<string>("ManufacturerSerialNo")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("NrrcId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PermitInventoryId")
                        .HasColumnType("int");

                    b.Property<int?>("PermitdetailsId")
                        .HasColumnType("int");

                    b.Property<int?>("PhysicalForm")
                        .HasColumnType("int");

                    b.Property<int?>("PractiseId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("SourceModel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.HasKey("SourceId");

                    b.HasIndex("AmanOrgId")
                        .IsUnique()
                        .HasFilter("[AmanOrgId] IS NOT NULL");

                    b.HasIndex("EntityId");

                    b.HasIndex("FacilityId");

                    b.HasIndex("LicenseId");

                    b.HasIndex("LicenseInventoryId");

                    b.HasIndex("ManufacturerCountryId");

                    b.HasIndex("ManufacturerId");

                    b.HasIndex("ManufacturerSerialNo")
                        .IsUnique()
                        .HasFilter("[ManufacturerSerialNo] IS NOT NULL");

                    b.HasIndex("PermitInventoryId");

                    b.HasIndex("PermitdetailsId");

                    b.HasIndex("PhysicalForm");

                    b.HasIndex("PractiseId");

                    b.HasIndex("Status");

                    b.ToTable("NuclearMaterials");
                });

            modelBuilder.Entity("PRJ.Domain.Entities.NuclearMaterial.NuclearMaterialElement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<double?>("ElementMass")
                        .HasColumnType("float");

                    b.Property<int?>("ElementMassUnit")
                        .HasColumnType("int");

                    b.Property<int?>("InitialMassUnit")
                        .HasColumnType("int");

                    b.Property<int>("NuclearMaterialId")
                        .HasColumnType("int");

                    b.Property<int?>("NuclearMaterialType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InitialMassUnit");

                    b.HasIndex("NuclearMaterialId");

                    b.HasIndex("NuclearMaterialType");

                    b.ToTable("NuclearMaterialElements");
                });

            modelBuilder.Entity("PRJ.Domain.Entities.NuclearMaterial.NuclearMaterialFiles", b =>
                {
                    b.Property<int>("ItemSourceFileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ItemSourceFileId"), 1L, 1);

                    b.Property<int?>("AmanOrgId")
                        .HasColumnType("int");

                    b.Property<int>("AttachmentType")
                        .HasColumnType("int");

                    b.Property<string>("ContentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("FileBytes")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FileNum")
                        .HasColumnType("int");

                    b.Property<string>("FileOriginalName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FileSize")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("NuclearMaterialId")
                        .HasColumnType("int");

                    b.HasKey("ItemSourceFileId");

                    b.HasIndex("AmanOrgId")
                        .IsUnique()
                        .HasFilter("[AmanOrgId] IS NOT NULL");

                    b.HasIndex("NuclearMaterialId");

                    b.ToTable("NuclearMaterialFiles");
                });

            modelBuilder.Entity("PRJ.Domain.Entities.NuclearMaterial.NuclearMaterialRadionulcide", b =>
                {
                    b.Property<int>("NuclearMaterialRadionulcideId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NuclearMaterialRadionulcideId"), 1L, 1);

                    b.Property<int?>("AmanOrgId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<float?>("Enrichment")
                        .HasColumnType("real");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("NuclearMaterialElementId")
                        .HasColumnType("int");

                    b.Property<int>("RadionulcideId")
                        .HasColumnType("int");

                    b.HasKey("NuclearMaterialRadionulcideId");

                    b.HasIndex("AmanOrgId")
                        .IsUnique()
                        .HasFilter("[AmanOrgId] IS NOT NULL");

                    b.HasIndex("NuclearMaterialElementId");

                    b.HasIndex("RadionulcideId");

                    b.ToTable("NuclearMaterialRadionulcides");
                });

            modelBuilder.Entity("PRJ.Domain.Entities.NuclearRelatedItemsProfile", b =>
                {
                    b.Property<int>("NRRCRelatedItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NRRCRelatedItemId"), 1L, 1);

                    b.Property<int?>("AmanOrgId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateofManufacturing")
                        .HasColumnType("datetime2");

                    b.Property<string>("EndUserCertificateFlag")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int?>("EntityId")
                        .HasColumnType("int");

                    b.Property<int?>("FacilityId")
                        .HasColumnType("int");

                    b.Property<string>("FacilityRelatedItemID")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("GovernmentCommitmentsFlag")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("HSCode")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int?>("ItemCategory")
                        .HasColumnType("int");

                    b.Property<string>("ItemTypeNo")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("ItemtypeName")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int?>("LegalRepresentativesId")
                        .HasColumnType("int");

                    b.Property<int?>("LicenseId")
                        .HasColumnType("int");

                    b.Property<int?>("LicenseInventoryId")
                        .HasColumnType("int");

                    b.Property<int?>("ManufactureCountryId")
                        .HasColumnType("int");

                    b.Property<int?>("ManufacturerId")
                        .HasColumnType("int");

                    b.Property<string>("ManufacturerSerialNo")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("ModelNumber")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("NrrcID")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("PermitInitialQty")
                        .HasColumnType("int");

                    b.Property<int?>("PermitInventoryId")
                        .HasColumnType("int");

                    b.Property<int?>("PermitdetailsId")
                        .HasColumnType("int");

                    b.Property<int?>("PractiseId")
                        .HasColumnType("int");

                    b.Property<string>("Purpose")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("RelatedItemDescAr")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("RelatedItemDescEn")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<int?>("SROId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Unit")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("NRRCRelatedItemId");

                    b.HasIndex("AmanOrgId")
                        .IsUnique()
                        .HasFilter("[AmanOrgId] IS NOT NULL");

                    b.HasIndex("EntityId");

                    b.HasIndex("FacilityId");

                    b.HasIndex("ItemCategory");

                    b.HasIndex("LegalRepresentativesId");

                    b.HasIndex("LicenseId");

                    b.HasIndex("LicenseInventoryId");

                    b.HasIndex("ManufactureCountryId");

                    b.HasIndex("ManufacturerId");

                    b.HasIndex("PermitInventoryId");

                    b.HasIndex("PermitdetailsId");

                    b.HasIndex("PractiseId");

                    b.HasIndex("SROId");

                    b.ToTable("NuclearRelatedItemsProfile");
                });

            modelBuilder.Entity("PRJ.Domain.Entities.PermitDetailsProfile", b =>
                {
                    b.Property<int>("PermitDetailsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PermitDetailsId"), 1L, 1);

                    b.Property<DateTime?>("AmanInsertedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("AmanOrgId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EffectiveDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("FacilityId")
                        .HasColumnType("int");

                    b.Property<int?>("LicenseId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("PermitNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PermitType")
                        .HasColumnType("int");

                    b.HasKey("PermitDetailsId");

                    b.HasIndex("AmanOrgId")
                        .IsUnique()
                        .HasFilter("[AmanOrgId] IS NOT NULL");

                    b.HasIndex("FacilityId");

                    b.HasIndex("LicenseId");

                    b.HasIndex("PermitType");

                    b.ToTable("PermitDetailsProfile");
                });

            modelBuilder.Entity("PRJ.Domain.Entities.PractiseProfile", b =>
                {
                    b.Property<int>("PractiseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PractiseId"), 1L, 1);

                    b.Property<DateTime?>("AmanInsertedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("AmanOrgId")
                        .HasColumnType("int");

                    b.Property<int?>("AmmanId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PermitDetailsId")
                        .HasColumnType("int");

                    b.Property<string>("PractiseNameAr")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("PractiseNameEn")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.HasKey("PractiseId");

                    b.HasIndex("AmanOrgId")
                        .IsUnique()
                        .HasFilter("[AmanOrgId] IS NOT NULL");

                    b.HasIndex("PermitDetailsId");

                    b.ToTable("PractiseProfile");
                });

            modelBuilder.Entity("PRJ.Domain.Entities.RadiationGeneratorsProfile", b =>
                {
                    b.Property<int>("EquipmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EquipmentId"), 1L, 1);

                    b.Property<int?>("AmanOrgId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateofManufacturing")
                        .HasColumnType("datetime2");

                    b.Property<string>("DoseUnit")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("EnergyUnit")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int?>("EntityId")
                        .HasColumnType("int");

                    b.Property<string>("EquipmentDescAr")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("EquipmentDescEn")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<int?>("EquipmentType")
                        .HasColumnType("int");

                    b.Property<int?>("FacilityId")
                        .HasColumnType("int");

                    b.Property<string>("FacilitySerialNo")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("LegalRepresentativesId")
                        .HasColumnType("int");

                    b.Property<int?>("LicenseId")
                        .HasColumnType("int");

                    b.Property<int?>("LicenseInventoryId")
                        .HasColumnType("int");

                    b.Property<int?>("ManufacturerId")
                        .HasColumnType("int");

                    b.Property<string>("ManufacturerSerialNo")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("MaxCurrent")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("MaxDoseRate")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("MaxEnergy")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("ModelNumber")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("NrrcID")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("PermitInventoryId")
                        .HasColumnType("int");

                    b.Property<int?>("PermitdetailsId")
                        .HasColumnType("int");

                    b.Property<int?>("PractiseId")
                        .HasColumnType("int");

                    b.Property<string>("Purpose")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int?>("SROId")
                        .HasColumnType("int");

                    b.Property<string>("SheildMaterial")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("ShieldNuclearMaterialCode")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Status")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Unit")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("XRayTubeSerialNo")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("EquipmentId");

                    b.HasIndex("AmanOrgId")
                        .IsUnique()
                        .HasFilter("[AmanOrgId] IS NOT NULL");

                    b.HasIndex("EntityId");

                    b.HasIndex("EquipmentType");

                    b.HasIndex("FacilityId");

                    b.HasIndex("LegalRepresentativesId");

                    b.HasIndex("LicenseId");

                    b.HasIndex("LicenseInventoryId");

                    b.HasIndex("ManufacturerId");

                    b.HasIndex("PermitInventoryId");

                    b.HasIndex("PermitdetailsId");

                    b.HasIndex("PractiseId");

                    b.HasIndex("SROId");

                    b.ToTable("RadiationGeneratorsProfile");
                });

            modelBuilder.Entity("PRJ.Domain.Entities.Radionuclides", b =>
                {
                    b.Property<int>("RadionuclideId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RadionuclideId"), 1L, 1);

                    b.Property<int?>("AmanOrgId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<float?>("ExemptionValue")
                        .HasColumnType("real");

                    b.Property<int?>("ExemptionValueUnitId")
                        .HasColumnType("int");

                    b.Property<float?>("HalfLife")
                        .HasColumnType("real");

                    b.Property<int?>("HalfLifeUnitId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Isotop")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("RadionuclideId");

                    b.HasIndex("AmanOrgId")
                        .IsUnique()
                        .HasFilter("[AmanOrgId] IS NOT NULL");

                    b.HasIndex("ExemptionValueUnitId");

                    b.HasIndex("HalfLifeUnitId");

                    b.ToTable("Radionuclides");
                });

            modelBuilder.Entity("PRJ.Domain.Entities.RelatedItemFiles", b =>
                {
                    b.Property<int>("FileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FileId"), 1L, 1);

                    b.Property<int?>("AmanOrgId")
                        .HasColumnType("int");

                    b.Property<string>("Attachments")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ContentType")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("FileBytes")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("FileName")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("FileNum")
                        .HasColumnType("int");

                    b.Property<string>("FileOriginalName")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("FilePath")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<int>("FileSize")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("RealtedItemCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RelatedItemFileId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("UploadType")
                        .HasColumnType("int");

                    b.HasKey("FileId");

                    b.HasIndex("AmanOrgId")
                        .IsUnique()
                        .HasFilter("[AmanOrgId] IS NOT NULL");

                    b.HasIndex("Attachments");

                    b.HasIndex("RealtedItemCode");

                    b.ToTable("RelatedItemFiles");
                });

            modelBuilder.Entity("PRJ.Domain.Entities.RelatedItemHierarchyStructure", b =>
                {
                    b.Property<string>("ItemStructureCode")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("AmanOrgId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ItemStructureDesFrn")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ItemStructureDesNtv")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ItemStructureLongDes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ParentStructure")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("StructureGeneralDetailFlag")
                        .HasColumnType("int");

                    b.Property<int>("StructureLevelNum")
                        .HasColumnType("int");

                    b.HasKey("ItemStructureCode");

                    b.HasIndex("AmanOrgId")
                        .IsUnique()
                        .HasFilter("[AmanOrgId] IS NOT NULL");

                    b.ToTable("RelatedItemHierarchyStructure");
                });

            modelBuilder.Entity("PRJ.Domain.Entities.RelatedItems", b =>
                {
                    b.Property<string>("RelatedItemCode")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("AmanOrgId")
                        .HasColumnType("int");

                    b.Property<string>("Attachments")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfManufacturing")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool?>("EndUserCertificate")
                        .HasColumnType("bit");

                    b.Property<string>("FacilityRelatedItemID")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool?>("GeneralDetailFlag")
                        .HasColumnType("bit");

                    b.Property<bool?>("GovernmentCommitments")
                        .HasColumnType("bit");

                    b.Property<string>("HSCode")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("ItemCategory")
                        .HasColumnType("int");

                    b.Property<string>("ItemStructureCode")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ItemTypeName")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ItemTypeNumber")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("Manufacturer")
                        .HasColumnType("int");

                    b.Property<string>("ManufacturerSerialNom")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Model")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("NuclearEntityId")
                        .HasColumnType("int");

                    b.Property<double?>("PermitinitialQty")
                        .HasColumnType("float");

                    b.Property<string>("Purpose")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("StatusID")
                        .HasColumnType("int");

                    b.Property<int?>("StructureLevelNum")
                        .HasMaxLength(450)
                        .HasColumnType("int");

                    b.HasKey("RelatedItemCode");

                    b.HasIndex("AmanOrgId")
                        .IsUnique()
                        .HasFilter("[AmanOrgId] IS NOT NULL");

                    b.HasIndex("ItemCategory");

                    b.HasIndex("Manufacturer");

                    b.HasIndex("StatusID");

                    b.ToTable("RelatedItems");
                });

            modelBuilder.Entity("PRJ.Domain.Entities.SafetyResponsibleOfficersProfile", b =>
                {
                    b.Property<int>("SROId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SROId"), 1L, 1);

                    b.Property<DateTime?>("AmanInsertedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("AmanOrgId")
                        .HasColumnType("int");

                    b.Property<string>("CertificateNo")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmailId")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("IssuanceDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MobileNo")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("NationalID")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PhoneNo")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("SRONameAr")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("SRONameEn")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.HasKey("SROId");

                    b.HasIndex("AmanOrgId")
                        .IsUnique()
                        .HasFilter("[AmanOrgId] IS NOT NULL");

                    b.ToTable("SafetyResponsibleOfficersProfile");
                });

            modelBuilder.Entity("PRJ.Domain.Entities.TransactionAttachments", b =>
                {
                    b.Property<int>("TrnItemSourceFileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TrnItemSourceFileId"), 1L, 1);

                    b.Property<int?>("AmanOrgId")
                        .HasColumnType("int");

                    b.Property<int>("AttachmentType")
                        .HasColumnType("int");

                    b.Property<string>("ContentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("FileBytes")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FileNum")
                        .HasColumnType("int");

                    b.Property<string>("FileOriginalName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FileSize")
                        .HasColumnType("int");

                    b.Property<bool?>("ForShield")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("TrnSourceID")
                        .HasColumnType("int");

                    b.HasKey("TrnItemSourceFileId");

                    b.HasIndex("AmanOrgId")
                        .IsUnique()
                        .HasFilter("[AmanOrgId] IS NOT NULL");

                    b.HasIndex("TrnSourceID");

                    b.ToTable("TrnItemFiles");
                });

            modelBuilder.Entity("PRJ.Domain.Entities.TransactionHeader", b =>
                {
                    b.Property<int>("TrnHeaderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TrnHeaderId"), 1L, 1);

                    b.Property<int?>("AmanOrgId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ConfirmedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConfirmedUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("TransactionTypeId")
                        .HasColumnType("int");

                    b.Property<int>("TrnStatus")
                        .HasColumnType("int");

                    b.HasKey("TrnHeaderId");

                    b.HasIndex("AmanOrgId")
                        .IsUnique()
                        .HasFilter("[AmanOrgId] IS NOT NULL");

                    b.HasIndex("TransactionTypeId");

                    b.ToTable("TransactionHeader");
                });

            modelBuilder.Entity("PRJ.Domain.Entities.TransactionTypeMaster", b =>
                {
                    b.Property<int>("TransactionTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransactionTypeId"), 1L, 1);

                    b.Property<int?>("AmanOrgId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("TCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TransactionTypeDesFrn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TransactionTypeDesNtv")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TransactionTypeId");

                    b.HasIndex("AmanOrgId")
                        .IsUnique()
                        .HasFilter("[AmanOrgId] IS NOT NULL");

                    b.ToTable("TransactionTypeMaster");
                });

            modelBuilder.Entity("PRJ.Domain.Entities.TreeControl", b =>
                {
                    b.Property<string>("TreeCode")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnOrder(0);

                    b.Property<int>("LevelNum")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<int?>("LevelInterval")
                        .HasColumnType("int");

                    b.Property<int?>("LevelLength")
                        .HasColumnType("int");

                    b.Property<string>("LevelPadding")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("LevelTitleFRN")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LevelTitleNTV")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("StartingNum")
                        .HasColumnType("int");

                    b.HasKey("TreeCode", "LevelNum");

                    b.ToTable("TreeControl");
                });

            modelBuilder.Entity("PRJ.Domain.Entities.TrnItemSource", b =>
                {
                    b.Property<int>("TrnSourceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TrnSourceId"), 1L, 1);

                    b.Property<int?>("AmanOrgId")
                        .HasColumnType("int");

                    b.Property<int?>("AssociatedEquipment")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EntityId")
                        .HasColumnType("int");

                    b.Property<int?>("FacilityId")
                        .HasColumnType("int");

                    b.Property<string>("FacilitySerialNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("InitialMass")
                        .HasColumnType("float");

                    b.Property<int?>("InitialMassUnit")
                        .HasColumnType("int");

                    b.Property<bool>("IsShieldDU")
                        .HasColumnType("bit");

                    b.Property<int?>("LegalRepresentativesId")
                        .HasColumnType("int");

                    b.Property<int?>("LicenseId")
                        .HasColumnType("int");

                    b.Property<int?>("LicenseInventoryId")
                        .HasColumnType("int");

                    b.Property<int?>("ManufacturerCountryId")
                        .HasColumnType("int");

                    b.Property<int?>("ManufacturerId")
                        .HasColumnType("int");

                    b.Property<string>("ManufacturerSerialNo")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("NoCharacterizationCertificateFlag")
                        .HasColumnType("bit");

                    b.Property<bool>("NoCustomImportPermitFlag")
                        .HasColumnType("bit");

                    b.Property<bool>("NoImagesFlag")
                        .HasColumnType("bit");

                    b.Property<bool>("NoManufacturerCertificateFlag")
                        .HasColumnType("bit");

                    b.Property<bool>("NoShipperImportPermitFlag")
                        .HasColumnType("bit");

                    b.Property<bool>("NoSourceTagImageFlag")
                        .HasColumnType("bit");

                    b.Property<string>("NrrcId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NuclearMaterial")
                        .HasColumnType("int");

                    b.Property<int?>("PermitInventoryId")
                        .HasColumnType("int");

                    b.Property<int?>("PermitdetailsId")
                        .HasColumnType("int");

                    b.Property<int?>("PhysicalForm")
                        .HasColumnType("int");

                    b.Property<int?>("PractiseId")
                        .HasColumnType("int");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<int?>("SROId")
                        .HasColumnType("int");

                    b.Property<string>("ShieldNuclearMaterialCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("SourceActivity")
                        .HasColumnType("float");

                    b.Property<int?>("SourceActivityUnit")
                        .HasColumnType("int");

                    b.Property<int?>("SourceCategory")
                        .HasColumnType("int");

                    b.Property<string>("SourceModel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SourceType")
                        .HasColumnType("int");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("TransactionHeaderId")
                        .HasColumnType("int");

                    b.HasKey("TrnSourceId");

                    b.HasIndex("AmanOrgId")
                        .IsUnique()
                        .HasFilter("[AmanOrgId] IS NOT NULL");

                    b.HasIndex("AssociatedEquipment");

                    b.HasIndex("EntityId");

                    b.HasIndex("FacilityId");

                    b.HasIndex("InitialMassUnit");

                    b.HasIndex("LegalRepresentativesId");

                    b.HasIndex("LicenseId");

                    b.HasIndex("LicenseInventoryId");

                    b.HasIndex("ManufacturerCountryId");

                    b.HasIndex("ManufacturerId");

                    b.HasIndex("ManufacturerSerialNo")
                        .IsUnique()
                        .HasFilter("[ManufacturerSerialNo] IS NOT NULL");

                    b.HasIndex("NuclearMaterial");

                    b.HasIndex("PermitInventoryId");

                    b.HasIndex("PermitdetailsId");

                    b.HasIndex("PhysicalForm");

                    b.HasIndex("PractiseId");

                    b.HasIndex("SROId");

                    b.HasIndex("SourceActivityUnit");

                    b.HasIndex("SourceCategory");

                    b.HasIndex("SourceType");

                    b.HasIndex("Status");

                    b.HasIndex("TransactionHeaderId");

                    b.ToTable("TrnItemSource");
                });

            modelBuilder.Entity("PRJ.Domain.Entities.TrnItemSourceHistory", b =>
                {
                    b.Property<int>("TrnHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TrnHistoryId"), 1L, 1);

                    b.Property<int?>("AmanOrgId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ItemSourceProfileId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("NewValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TransactionAttribute")
                        .HasColumnType("int");

                    b.Property<string>("TransactionCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("TransactionId")
                        .HasColumnType("int");

                    b.Property<int>("TransactionTypeId")
                        .HasColumnType("int");

                    b.HasKey("TrnHistoryId");

                    b.HasIndex("AmanOrgId")
                        .IsUnique()
                        .HasFilter("[AmanOrgId] IS NOT NULL");

                    b.HasIndex("TransactionId");

                    b.HasIndex("TransactionTypeId");

                    b.ToTable("TrnItemSourceHistory");
                });

            modelBuilder.Entity("PRJ.Domain.Entities.TrnItemSourceRadionuclides", b =>
                {
                    b.Property<int>("TrnRadionuclideId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TrnRadionuclideId"), 1L, 1);

                    b.Property<int?>("AmanOrgId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<float?>("InitialActivity")
                        .HasColumnType("real");

                    b.Property<DateTime?>("InitialActivityDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("InitialActivityUnit")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("RadionulcideId")
                        .HasColumnType("int");

                    b.Property<int?>("TrnSourceID")
                        .HasColumnType("int");

                    b.HasKey("TrnRadionuclideId");

                    b.HasIndex("AmanOrgId")
                        .IsUnique()
                        .HasFilter("[AmanOrgId] IS NOT NULL");

                    b.HasIndex("InitialActivityUnit");

                    b.HasIndex("RadionulcideId");

                    b.HasIndex("TrnSourceID");

                    b.ToTable("TrnItemSourceRadionuclides");
                });

            modelBuilder.Entity("PRJ.Domain.Entities.Workers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("AmanOrgId")
                        .HasColumnType("int");

                    b.Property<DateTime>("BirthDate")
                        .HasMaxLength(200)
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("CurrentDosimeterID")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CurrentDosimeterType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("FacilityId")
                        .HasColumnType("int");

                    b.Property<string>("JobPosition")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Nationality")
                        .HasColumnType("int");

                    b.Property<string>("NationalityId")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("PassportNo")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<int?>("Status")
                        .HasMaxLength(80)
                        .HasColumnType("int");

                    b.Property<string>("WorkerNameAr")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("WorkerNameEn")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.HasKey("Id");

                    b.HasIndex("AmanOrgId")
                        .IsUnique()
                        .HasFilter("[AmanOrgId] IS NOT NULL");

                    b.HasIndex("FacilityId");

                    b.HasIndex("Nationality");

                    b.HasIndex("Status");

                    b.ToTable("Workers");
                });

            modelBuilder.Entity("PRJ.Domain.Entities.WorkersDosimeters", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("LineNum")
                        .HasColumnType("int");

                    b.Property<bool?>("ActiveFlag")
                        .HasColumnType("bit");

                    b.Property<int?>("AmanOrgId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DosimeterID")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("DosimeterType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("EndWearDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("StartWearDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id", "LineNum");

                    b.HasIndex("AmanOrgId")
                        .IsUnique()
                        .HasFilter("[AmanOrgId] IS NOT NULL");

                    b.ToTable("WorkersDosimeters");
                });

            modelBuilder.Entity("PRJ.Domain.Entities.WorkersExposuresDoses", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("LineNum")
                        .HasColumnType("int");

                    b.Property<int?>("AmanOrgId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("DeepDose")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("DeepDoseUOM")
                        .HasColumnType("int");

                    b.Property<decimal>("DeepTotalAccumulatedDose1Yr")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("DeepTotalAccumulatedDose5Yr")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("DosimeterID")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("DosimeterType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("EyeDose")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("EyeDoseUOM")
                        .HasColumnType("int");

                    b.Property<decimal>("EyeTotalAccumulatedDose1Yr")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("EyeTotalAccumulatedDose5Yr")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("InitialDayofMonitoring")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastDayofMonitoring")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("MeasurementDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("NeutronDose")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("NeutronDoseUOM")
                        .HasColumnType("int");

                    b.Property<decimal>("ShallowDose")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("ShallowDoseUOM")
                        .HasColumnType("int");

                    b.Property<decimal>("ShallowTotalAccumulatedDose1Yr")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id", "LineNum");

                    b.HasIndex("AmanOrgId")
                        .IsUnique()
                        .HasFilter("[AmanOrgId] IS NOT NULL");

                    b.ToTable("WorkersExposuresDoses");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("PRJ.Domain.Entities.ExternalMaserUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("PRJ.Domain.Entities.ExternalMaserUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PRJ.Domain.Entities.ExternalMaserUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("PRJ.Domain.Entities.ExternalMaserUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PRJ.Domain.Entities.AmanIntegrationEntities.LicenseInventoryEntities.LicenseGenerators", b =>
                {
                    b.HasOne("PRJ.Domain.Entities.AmanIntegrationEntities.LicenseInventoryLimits", null)
                        .WithMany("Generators")
                        .HasForeignKey("LicenseInventoryLimitsLicenseInventoryId");

                    b.HasOne("PRJ.Domain.Entities.LookupSetTerm", "SourceUsedInLookup")
                        .WithMany()
                        .HasForeignKey("SourceUsedIn");

                    b.Navigation("SourceUsedInLookup");
                });

            modelBuilder.Entity("PRJ.Domain.Entities.AmanIntegrationEntities.LicenseInventoryEntities.LicenseSealedSources", b =>
                {
                    b.HasOne("PRJ.Domain.Entities.AmanIntegrationEntities.LicenseInventoryLimits", null)
                        .WithMany("SealedSources")
                        .HasForeignKey("LicenseInventoryLimitsLicenseInventoryId");

                    b.HasOne("PRJ.Domain.Entities.LookupSetTerm", "MaximumRadioactivityUnitLookup")
                        .WithMany()
                        .HasForeignKey("MaximumRadioactivityUnit");

                    b.HasOne("PRJ.Domain.Entities.LookupSetTerm", "RadionuclideLookup")
                        .WithMany()
                        .HasForeignKey("Radionuclide");

                    b.HasOne("PRJ.Domain.Entities.LookupSetTerm", "SourceUsedInLookup")
                        .WithMany()
                        .HasForeignKey("SourceUsedIn");

                    b.Navigation("MaximumRadioactivityUnitLookup");

                    b.Navigation("RadionuclideLookup");

                    b.Navigation("SourceUsedInLookup");
                });

            modelBuilder.Entity("PRJ.Domain.Entities.AmanIntegrationEntities.LicenseInventoryEntities.LicenseUnSealedSources", b =>
                {
                    b.HasOne("PRJ.Domain.Entities.AmanIntegrationEntities.LicenseInventoryLimits", null)
                        .WithMany("UnSealedSources")
                        .HasForeignKey("LicenseInventoryLimitsLicenseInventoryId");

                    b.HasOne("PRJ.Domain.Entities.LookupSetTerm", "PhysicalFormLookup")
                        .WithMany()
                        .HasForeignKey("PhysicalForm");

                    b.HasOne("PRJ.Domain.Entities.LookupSetTerm", "RadionuclideLookup")
                        .WithMany()
                        .HasForeignKey("Radionuclide");

                    b.HasOne("PRJ.Domain.Entities.LookupSetTerm", "SourceUsedInLookup")
                        .WithMany()
                        .HasForeignKey("SourceUsedIn");

                    b.Navigation("PhysicalFormLookup");

                    b.Navigation("RadionuclideLookup");

                    b.Navigation("SourceUsedInLookup");
                });

            modelBuilder.Entity("PRJ.Domain.Entities.AmanIntegrationEntities.LicenseInventoryEntities.VUnsealedSources", b =>
                {
                    b.HasOne("PRJ.Domain.Entities.AmanIntegrationEntities.LicenseInventoryLimits", null)
                        .WithMany("VUnSealedSources")
                        .HasForeignKey("LicenseInventoryLimitsLicenseInventoryId");

                    b.HasOne("PRJ.Domain.Entities.LookupSetTerm", "MaximumRadioactivityInTheWorkPlaceUnitLookup")
                        .WithMany()
                        .HasForeignKey("MaximumRadioactivityInTheWorkPlaceUnit");

                    b.HasOne("PRJ.Domain.Entities.LookupSetTerm", "MaximumRadioactivityPerSourceUnitLookup")
                        .WithMany()
                        .HasForeignKey("MaximumRadioactivityPerSourceUnit");

                    b.HasOne("PRJ.Domain.Entities.LookupSetTerm", "PhysicalFormLookup")
                        .WithMany()
                        .HasForeignKey("PhysicalForm");

                    b.HasOne("PRJ.Domain.Entities.LookupSetTerm", "RadionuclideLookup")
                        .WithMany()
                        .HasForeignKey("Radionuclide");

                    b.HasOne("PRJ.Domain.Entities.LookupSetTerm", "SourceUsedInLookup")
                        .WithMany()
                        .HasForeignKey("SourceUsedIn");

                    b.HasOne("PRJ.Domain.Entities.LookupSetTerm", "UnsealedSourceTypeLookup")
                        .WithMany()
                        .HasForeignKey("UnsealedSourceType");

                    b.Navigation("MaximumRadioactivityInTheWorkPlaceUnitLookup");

                    b.Navigation("MaximumRadioactivityPerSourceUnitLookup");

                    b.Navigation("PhysicalFormLookup");

                    b.Navigation("RadionuclideLookup");

                    b.Navigation("SourceUsedInLookup");

                    b.Navigation("UnsealedSourceTypeLookup");
                });

            modelBuilder.Entity("PRJ.Domain.Entities.AmanIntegrationEntities.LicenseInventoryLimits", b =>
                {
                    b.HasOne("PRJ.Domain.Entities.FacilityProfile", "FacilityProfile")
                        .WithMany()
                        .HasForeignKey("FacilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PRJ.Domain.Entities.LicenseProfile", "LicenseProfile")
                        .WithMany()
                        .HasForeignKey("LicenseMasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FacilityProfile");

                    b.Navigation("LicenseProfile");
                });

            modelBuilder.Entity("PRJ.Domain.Entities.AmanIntegrationEntities.PermitInventoryEntities.PermitGenerators", b =>
                {
                    b.HasOne("PRJ.Domain.Entities.LookupSetTerm", "EquipmentTypeLookup")
                        .WithMany()
                        .HasForeignKey("EquipmentType");

                    b.HasOne("PRJ.Domain.Entities.LookupSetTerm", "ManufactuerNameLookup")
                        .WithMany()
                        .HasForeignKey("ManufactuerName");

                    b.HasOne("PRJ.Domain.Entities.AmanIntegrationEntities.PermitInventoryLimits", null)
                        .WithMany("Generators")
                        .HasForeignKey("PermitInventoryLimitsPermitInventoryId");

                    b.Navigation("EquipmentTypeLookup");

                    b.Navigation("ManufactuerNameLookup");
                });

            modelBuilder.Entity("PRJ.Domain.Entities.AmanIntegrationEntities.PermitInventoryEntities.PermitNuclearSources", b =>
                {
                    b.HasOne("PRJ.Domain.Entities.LookupSetTerm", "EquipmentTypeLookup")
                        .WithMany()
                        .HasForeignKey("EquipmentType");

                    b.HasOne("PRJ.Domain.Entities.LookupSetTerm", "ManufactuerNameLookup")
                        .WithMany()
                        .HasForeignKey("ManufactuerName");

                    b.HasOne("PRJ.Domain.Entities.AmanIntegrationEntities.PermitInventoryLimits", null)
                        .WithMany("NuclearSources")
                        .HasForeignKey("PermitInventoryLimitsPermitInventoryId");

                    b.Navigation("EquipmentTypeLookup");

                    b.Navigation("ManufactuerNameLookup");
                });

            modelBuilder.Entity("PRJ.Domain.Entities.AmanIntegrationEntities.PermitInventoryEntities.PermitSealedSources", b =>
                {
                    b.HasOne("PRJ.Domain.Entities.LookupSetTerm", "ManufactuerNameLookup")
                        .WithMany()
                        .HasForeignKey("ManufactuerName");

                    b.HasOne("PRJ.Domain.Entities.LookupSetTerm", "MaximumRadioactivityUnitLookup")
                        .WithMany()
                        .HasForeignKey("MaximumRadioactivityUnit");

                    b.HasOne("PRJ.Domain.Entities.AmanIntegrationEntities.PermitInventoryLimits", null)
                        .WithMany("SealedSources")
                        .HasForeignKey("PermitInventoryLimitsPermitInventoryId");

                    b.HasOne("PRJ.Domain.Entities.LookupSetTerm", "RadionuclideLookup")
                        .WithMany()
                        .HasForeignKey("Radionuclide");

                    b.Navigation("ManufactuerNameLookup");

                    b.Navigation("MaximumRadioactivityUnitLookup");

                    b.Navigation("RadionuclideLookup");
                });

            modelBuilder.Entity("PRJ.Domain.Entities.AmanIntegrationEntities.PermitInventoryEntities.PermitUnSealedSources", b =>
                {
                    b.HasOne("PRJ.Domain.Entities.LookupSetTerm", "CurrentActivityUnitLookup")
                        .WithMany()
                        .HasForeignKey("CurrentActivityUnit");

                    b.HasOne("PRJ.Domain.Entities.LookupSetTerm", "ManufactuerNameLookup")
                        .WithMany()
                        .HasForeignKey("ManufactuerName");

                    b.HasOne("PRJ.Domain.Entities.AmanIntegrationEntities.PermitInventoryLimits", null)
                        .WithMany("UnSealedSources")
                        .HasForeignKey("PermitInventoryLimitsPermitInventoryId");

                    b.HasOne("PRJ.Domain.Entities.LookupSetTerm", "PhysicalFormLookup")
                        .WithMany()
                        .HasForeignKey("PhysicalForm");

                    b.HasOne("PRJ.Domain.Entities.LookupSetTerm", "RadionuclideLookup")
                        .WithMany()
                        .HasForeignKey("Radionuclide");

                    b.Navigation("CurrentActivityUnitLookup");

                    b.Navigation("ManufactuerNameLookup");

                    b.Navigation("PhysicalFormLookup");

                    b.Navigation("RadionuclideLookup");
                });

            modelBuilder.Entity("PRJ.Domain.Entities.AmanIntegrationEntities.PermitInventoryLimits", b =>
                {
                    b.HasOne("PRJ.Domain.Entities.FacilityProfile", "FacilityProfile")
                        .WithMany()
                        .HasForeignKey("FacilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PRJ.Domain.Entities.LicenseProfile", "LicenseProfile")
                        .WithMany()
                        .HasForeignKey("LicenseMasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PRJ.Domain.Entities.PermitDetailsProfile", "PermitDetailsProfile")
                        .WithMany()
                        .HasForeignKey("PermitMasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FacilityProfile");

                    b.Navigation("LicenseProfile");

                    b.Navigation("PermitDetailsProfile");
                });

            modelBuilder.Entity("PRJ.Domain.Entities.Billing.ServiceItemPrice", b =>
                {
                    b.HasOne("PRJ.Domain.Entities.Billing.ServiceItemProfile", "ServiceItem")
                        .WithMany()
                        .HasForeignKey("ServiceItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ServiceItem");
                });

            modelBuilder.Entity("PRJ.Domain.Entities.Billing.ServiceItemProfile", b =>
                {
                    b.HasOne("PRJ.Domain.Entities.Billing.ItemHierarchyStructure", "ItemStructure")
                        .WithMany("serviceItemProfiles")
                        .HasForeignKey("ItemStructureCode1");

                    b.Navigation("ItemStructure");
                });

            modelBuilder.Entity("PRJ.Domain.Entities.BillingServiceTrn.BillingServiceTrnDetails", b =>
                {
                    b.HasOne("PRJ.Domain.Entities.BillingServiceTrn.BillingServiceTrnHeader", null)
                        .WithMany("BillingServiceTrnDetails")
                        .HasForeignKey("TransactionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PRJ.Domain.Entities.BillingServiceTrn.BillingServiceTrnHeader", b =>
                {
                    b.HasOne("PRJ.Domain.Entities.Billing.ItemHierarchyStructure", "ItemHierarchyStructure")
                        .WithMany()
                        .HasForeignKey("InvoiceBU");

                    b.HasOne("PRJ.Domain.Entities.LookupSetTerm", "InvoiceSources")
                        .WithMany()
                        .HasForeignKey("InvoiceSource");

                    b.HasOne("PRJ.Domain.Entities.LookupSetTerm", "LookupSetTerm")
                        .WithMany()
                        .HasForeignKey("StatusFlag")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InvoiceSources");

                    b.Navigation("ItemHierarchyStructure");

                    b.Navigation("LookupSetTerm");
                });

            modelBuilder.Entity("PRJ.Domain.Entities.EntityProfile", b =>
                {
                    b.HasOne("PRJ.Domain.Entities.LookupSetTerm", "EntityTypeLookup")
                        .WithMany()
                        .HasForeignKey("EntityType");

                    b.Navigation("EntityTypeLookup");
                });

            modelBuilder.Entity("PRJ.Domain.Entities.ExternalMaserUser", b =>
                {
                    b.HasOne("PRJ.Domain.Entities.BasCountries", "BasCountries")
                        .WithMany()
                        .HasForeignKey("CountryID");

                    b.Navigation("BasCountries");
                });

            modelBuilder.Entity("PRJ.Domain.Entities.FacilityProfile", b =>
                {
                    b.HasOne("PRJ.Domain.Entities.EntityProfile", "EntityProfile")
                        .WithMany()
                        .HasForeignKey("EntityId");

                    b.Navigation("EntityProfile");
                });

            modelBuilder.Entity("PRJ.Domain.Entities.InternalFieldPermission", b =>
                {
                    b.HasOne("PRJ.Domain.Entities.InternalScreenField", "InternalScreenField")
                        .WithMany("InternalFieldPermissions")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InternalScreenField");
                });

            modelBuilder.Entity("PRJ.Domain.Entities.InternalScreenField", b =>
                {
                    b.HasOne("PRJ.Domain.Entities.LookupSet", "LookupSet")
                        .WithMany("InternalScreenFields")
                        .HasForeignKey("LookupSetId");

                    b.HasOne("PRJ.Domain.Entities.ListOfValue", "ListOfValue")
                        .WithMany("InternalScreenFields")
                        .HasForeignKey("LovId");

                    b.HasOne("PRJ.Domain.Entities.InternalScreen", "Screen")
                        .WithMany("InternalScreenFields")
                        .HasForeignKey("ScreenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ListOfValue");

                    b.Navigation("LookupSet");

                    b.Navigation("Screen");
                });

            modelBuilder.Entity("PRJ.Domain.Entities.InternalScreenRole", b =>
                {
                    b.HasOne("PRJ.Domain.Entities.InternalRole", "Role")
                        .WithMany("InternalScreenRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PRJ.Domain.Entities.InternalScreen", "InternalScreen")
                        .WithMany("InternalScreenRoles")
                        .HasForeignKey("ScreenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InternalScreen");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("PRJ.Domain.Entities.ItemSourceFiles", b =>
                {
                    b.HasOne("PRJ.Domain.Entities.ItemSourceProfile", "ItemSourcesProfile")
                        .WithMany("ItemSourceFiles")
                        .HasForeignKey("SourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ItemSourcesProfile");
                });

            modelBuilder.Entity("PRJ.Domain.Entities.ItemSourceMsgHistory", b =>
                {
                    b.HasOne("PRJ.Domain.Entities.ItemSourceProfile", "ItemSourceProfile")
                        .WithMany("ItemSourceMsgs")
                        .HasForeignKey("SourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ItemSourceProfile");
                });

            modelBuilder.Entity("PRJ.Domain.Entities.ItemSourceProfile", b =>
                {
                    b.HasOne("PRJ.Domain.Entities.LookupSetTerm", "AssociatedEquipmentLookup")
                        .WithMany()
                        .HasForeignKey("AssociatedEquipment");

                    b.HasOne("PRJ.Domain.Entities.EntityProfile", "EntityProfile")
                        .WithMany()
                        .HasForeignKey("EntityId");

                    b.HasOne("PRJ.Domain.Entities.FacilityProfile", "FacilityProfile")
                        .WithMany()
                        .HasForeignKey("FacilityId");

                    b.HasOne("PRJ.Domain.Entities.LookupSetTerm", "InitialMassLookup")
                        .WithMany()
                        .HasForeignKey("InitialMassUnit");

                    b.HasOne("PRJ.Domain.Entities.LegalRepresentativesProfile", "LegalRepresentativesProfile")
                        .WithMany()
                        .HasForeignKey("LegalRepresentativesId");

                    b.HasOne("PRJ.Domain.Entities.LicenseProfile", "LicenseProfile")
                        .WithMany()
                        .HasForeignKey("LicenseId");

                    b.HasOne("PRJ.Domain.Entities.AmanIntegrationEntities.LicenseInventoryLimits", "LicenseInventoryLimits")
                        .WithMany()
                        .HasForeignKey("LicenseInventoryId");

                    b.HasOne("PRJ.Domain.Entities.LookupSetTerm", "ManufacturerCountryLookup")
                        .WithMany()
                        .HasForeignKey("ManufacturerCountryId");

                    b.HasOne("PRJ.Domain.Entities.LookupSetTerm", "ManufacturerLookup")
                        .WithMany()
                        .HasForeignKey("ManufacturerId");

                    b.HasOne("PRJ.Domain.Entities.LookupSetTerm", "NuclearMaterialLookup")
                        .WithMany()
                        .HasForeignKey("NuclearMaterial");

                    b.HasOne("PRJ.Domain.Entities.AmanIntegrationEntities.PermitInventoryLimits", "PermitInventoryLimits")
                        .WithMany()
                        .HasForeignKey("PermitInventoryId");

                    b.HasOne("PRJ.Domain.Entities.PermitDetailsProfile", "PermitDetailsProfile")
                        .WithMany()
                        .HasForeignKey("PermitdetailsId");

                    b.HasOne("PRJ.Domain.Entities.LookupSetTerm", "PhysicalFormLookup")
                        .WithMany()
                        .HasForeignKey("PhysicalForm");

                    b.HasOne("PRJ.Domain.Entities.PractiseProfile", "PractiseProfile")
                        .WithMany()
                        .HasForeignKey("PractiseId");

                    b.HasOne("PRJ.Domain.Entities.SafetyResponsibleOfficersProfile", "SafetyResponsibleOfficersProfile")
                        .WithMany()
                        .HasForeignKey("SROId");

                    b.HasOne("PRJ.Domain.Entities.NuclearMaterial.NuclearMaterial", "ShieldNuclearMaterial")
                        .WithOne("ItemSourceProfile")
                        .HasForeignKey("PRJ.Domain.Entities.ItemSourceProfile", "ShieldNuclearMaterialCode");

                    b.HasOne("PRJ.Domain.Entities.LookupSetTerm", "SourceActivityLookup")
                        .WithMany()
                        .HasForeignKey("SourceActivityUnit");

                    b.HasOne("PRJ.Domain.Entities.LookupSetTerm", "SourceCategoryLookup")
                        .WithMany()
                        .HasForeignKey("SourceCategory");

                    b.HasOne("PRJ.Domain.Entities.LookupSetTerm", "SourceTypeLookup")
                        .WithMany()
                        .HasForeignKey("SourceType");

                    b.HasOne("PRJ.Domain.Entities.LookupSetTerm", "StatusLookup")
                        .WithMany()
                        .HasForeignKey("Status");

                    b.HasOne("PRJ.Domain.Entities.TrnItemSource", "TrnItemSource")
                        .WithOne("ItemSourceProfile")
                        .HasForeignKey("PRJ.Domain.Entities.ItemSourceProfile", "TrnSourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssociatedEquipmentLookup");

                    b.Navigation("EntityProfile");

                    b.Navigation("FacilityProfile");

                    b.Navigation("InitialMassLookup");

                    b.Navigation("LegalRepresentativesProfile");

                    b.Navigation("LicenseInventoryLimits");

                    b.Navigation("LicenseProfile");

                    b.Navigation("ManufacturerCountryLookup");

                    b.Navigation("ManufacturerLookup");

                    b.Navigation("NuclearMaterialLookup");

                    b.Navigation("PermitDetailsProfile");

                    b.Navigation("PermitInventoryLimits");

                    b.Navigation("PhysicalFormLookup");

                    b.Navigation("PractiseProfile");

                    b.Navigation("SafetyResponsibleOfficersProfile");

                    b.Navigation("ShieldNuclearMaterial");

                    b.Navigation("SourceActivityLookup");

                    b.Navigation("SourceCategoryLookup");

                    b.Navigation("SourceTypeLookup");

                    b.Navigation("StatusLookup");

                    b.Navigation("TrnItemSource");
                });

            modelBuilder.Entity("PRJ.Domain.Entities.ItemSourceRadionulcides", b =>
                {
                    b.HasOne("PRJ.Domain.Entities.LookupSetTerm", "InitialActivityUnitLookup")
                        .WithMany()
                        .HasForeignKey("InitialActivityUnit");

                    b.HasOne("PRJ.Domain.Entities.Radionuclides", "Radionuclides")
                        .WithMany()
                        .HasForeignKey("RadionulcideId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PRJ.Domain.Entities.ItemSourceProfile", "ItemSourceProfile")
                        .WithMany("ItemSourceRadionulcides")
                        .HasForeignKey("SourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InitialActivityUnitLookup");

                    b.Navigation("ItemSourceProfile");

                    b.Navigation("Radionuclides");
                });

            modelBuilder.Entity("PRJ.Domain.Entities.ItemSourceStatusHistory", b =>
                {
                    b.HasOne("PRJ.Domain.Entities.ItemSourceStatusHistory", "ParentStatus")
                        .WithMany()
                        .HasForeignKey("ParentStatusId");

                    b.HasOne("PRJ.Domain.Entities.ItemSourceProfile", "ItemSourcesProfile")
                        .WithMany("ItemSourceStatusHistories")
                        .HasForeignKey("SourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PRJ.Domain.Entities.ItemSourceStatus", "ItemSourceStatus")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ItemSourceStatus");

                    b.Navigation("ItemSourcesProfile");

                    b.Navigation("ParentStatus");
                });

            modelBuilder.Entity("PRJ.Domain.Entities.LicenseProfile", b =>
                {
                    b.HasOne("PRJ.Domain.Entities.EntityProfile", "EntityProfile")
                        .WithMany()
                        .HasForeignKey("EntityId");

                    b.HasOne("PRJ.Domain.Entities.FacilityProfile", "FacilityProfile")
                        .WithMany()
                        .HasForeignKey("FacilityId");

                    b.HasOne("PRJ.Domain.Entities.LookupSetTerm", "LicensePracticesLookup")
                        .WithMany()
                        .HasForeignKey("LicensePractices");

                    b.HasOne("PRJ.Domain.Entities.LookupSetTerm", "PractiseSectorLookup")
                        .WithMany()
                        .HasForeignKey("PractiseSector");

                    b.Navigation("EntityProfile");

                    b.Navigation("FacilityProfile");

                    b.Navigation("LicensePracticesLookup");

                    b.Navigation("PractiseSectorLookup");
                });

            modelBuilder.Entity("PRJ.Domain.Entities.LookupSetTerm", b =>
                {
                    b.HasOne("PRJ.Domain.Entities.LookupSet", "LookupSet")
                        .WithMany("LookupSetTerms")
                        .HasForeignKey("LookupSetId")
                        .IsRequired()
                        .HasConstraintName("FK_LookupSetTerm_LookupSet");

                    b.Navigation("LookupSet");
                });

            modelBuilder.Entity("PRJ.Domain.Entities.ManufacturerMaster", b =>
                {
                    b.HasOne("PRJ.Domain.Entities.BasCountries", "BasCountries")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.Navigation("BasCountries");
                });

            modelBuilder.Entity("PRJ.Domain.Entities.NuclearMaterial.NuclearMaterial", b =>
                {
                    b.HasOne("PRJ.Domain.Entities.EntityProfile", "EntityProfile")
                        .WithMany()
                        .HasForeignKey("EntityId");

                    b.HasOne("PRJ.Domain.Entities.FacilityProfile", "FacilityProfile")
                        .WithMany()
                        .HasForeignKey("FacilityId");

                    b.HasOne("PRJ.Domain.Entities.LicenseProfile", "LicenseProfile")
                        .WithMany()
                        .HasForeignKey("LicenseId");

                    b.HasOne("PRJ.Domain.Entities.AmanIntegrationEntities.LicenseInventoryLimits", "LicenseInventoryLimits")
                        .WithMany()
                        .HasForeignKey("LicenseInventoryId");

                    b.HasOne("PRJ.Domain.Entities.LookupSetTerm", "ManufacturerCountryLookup")
                        .WithMany()
                        .HasForeignKey("ManufacturerCountryId");

                    b.HasOne("PRJ.Domain.Entities.LookupSetTerm", "ManufacturerLookup")
                        .WithMany()
                        .HasForeignKey("ManufacturerId");

                    b.HasOne("PRJ.Domain.Entities.AmanIntegrationEntities.PermitInventoryLimits", "PermitInventoryLimits")
                        .WithMany()
                        .HasForeignKey("PermitInventoryId");

                    b.HasOne("PRJ.Domain.Entities.PermitDetailsProfile", "PermitDetailsProfile")
                        .WithMany()
                        .HasForeignKey("PermitdetailsId");

                    b.HasOne("PRJ.Domain.Entities.LookupSetTerm", "PhysicalFormLookup")
                        .WithMany()
                        .HasForeignKey("PhysicalForm");

                    b.HasOne("PRJ.Domain.Entities.PractiseProfile", "PractiseProfile")
                        .WithMany()
                        .HasForeignKey("PractiseId");

                    b.HasOne("PRJ.Domain.Entities.LookupSetTerm", "StatusLookup")
                        .WithMany()
                        .HasForeignKey("Status");

                    b.Navigation("EntityProfile");

                    b.Navigation("FacilityProfile");

                    b.Navigation("LicenseInventoryLimits");

                    b.Navigation("LicenseProfile");

                    b.Navigation("ManufacturerCountryLookup");

                    b.Navigation("ManufacturerLookup");

                    b.Navigation("PermitDetailsProfile");

                    b.Navigation("PermitInventoryLimits");

                    b.Navigation("PhysicalFormLookup");

                    b.Navigation("PractiseProfile");

                    b.Navigation("StatusLookup");
                });

            modelBuilder.Entity("PRJ.Domain.Entities.NuclearMaterial.NuclearMaterialElement", b =>
                {
                    b.HasOne("PRJ.Domain.Entities.LookupSetTerm", "InitialMassLookup")
                        .WithMany()
                        .HasForeignKey("InitialMassUnit");

                    b.HasOne("PRJ.Domain.Entities.NuclearMaterial.NuclearMaterial", "NuclearMaterial")
                        .WithMany("NuclearMaterialElements")
                        .HasForeignKey("NuclearMaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PRJ.Domain.Entities.LookupSetTerm", "NuclearMaterialTypeLookup")
                        .WithMany()
                        .HasForeignKey("NuclearMaterialType");

                    b.Navigation("InitialMassLookup");

                    b.Navigation("NuclearMaterial");

                    b.Navigation("NuclearMaterialTypeLookup");
                });

            modelBuilder.Entity("PRJ.Domain.Entities.NuclearMaterial.NuclearMaterialFiles", b =>
                {
                    b.HasOne("PRJ.Domain.Entities.NuclearMaterial.NuclearMaterial", "NuclearMaterial")
                        .WithMany("NuclearMaterialFiles")
                        .HasForeignKey("NuclearMaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NuclearMaterial");
                });

            modelBuilder.Entity("PRJ.Domain.Entities.NuclearMaterial.NuclearMaterialRadionulcide", b =>
                {
                    b.HasOne("PRJ.Domain.Entities.NuclearMaterial.NuclearMaterialElement", "NuclearMaterialElement")
                        .WithMany("NuclearMaterialRadionulcides")
                        .HasForeignKey("NuclearMaterialElementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PRJ.Domain.Entities.Radionuclides", "Radionuclides")
                        .WithMany()
                        .HasForeignKey("RadionulcideId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NuclearMaterialElement");

                    b.Navigation("Radionuclides");
                });

            modelBuilder.Entity("PRJ.Domain.Entities.NuclearRelatedItemsProfile", b =>
                {
                    b.HasOne("PRJ.Domain.Entities.EntityProfile", "EntityProfile")
                        .WithMany()
                        .HasForeignKey("EntityId");

                    b.HasOne("PRJ.Domain.Entities.FacilityProfile", "FacilityProfile")
                        .WithMany()
                        .HasForeignKey("FacilityId");

                    b.HasOne("PRJ.Domain.Entities.LookupSet", "LookupSet")
                        .WithMany()
                        .HasForeignKey("ItemCategory");

                    b.HasOne("PRJ.Domain.Entities.LegalRepresentativesProfile", "LegalRepresentativesProfile")
                        .WithMany()
                        .HasForeignKey("LegalRepresentativesId");

                    b.HasOne("PRJ.Domain.Entities.LicenseProfile", "LicenseProfile")
                        .WithMany()
                        .HasForeignKey("LicenseId");

                    b.HasOne("PRJ.Domain.Entities.AmanIntegrationEntities.LicenseInventoryLimits", "LicenseInventoryLimits")
                        .WithMany()
                        .HasForeignKey("LicenseInventoryId");

                    b.HasOne("PRJ.Domain.Entities.BasCountries", "BasCountries")
                        .WithMany()
                        .HasForeignKey("ManufactureCountryId");

                    b.HasOne("PRJ.Domain.Entities.ManufacturerMaster", "ManufacturerMaster")
                        .WithMany()
                        .HasForeignKey("ManufacturerId");

                    b.HasOne("PRJ.Domain.Entities.AmanIntegrationEntities.PermitInventoryLimits", "PermitInventoryLimits")
                        .WithMany()
                        .HasForeignKey("PermitInventoryId");

                    b.HasOne("PRJ.Domain.Entities.PermitDetailsProfile", "PermitDetailsProfile")
                        .WithMany()
                        .HasForeignKey("PermitdetailsId");

                    b.HasOne("PRJ.Domain.Entities.PractiseProfile", "PractiseProfile")
                        .WithMany()
                        .HasForeignKey("PractiseId");

                    b.HasOne("PRJ.Domain.Entities.SafetyResponsibleOfficersProfile", "SafetyResponsibleOfficersProfile")
                        .WithMany()
                        .HasForeignKey("SROId");

                    b.Navigation("BasCountries");

                    b.Navigation("EntityProfile");

                    b.Navigation("FacilityProfile");

                    b.Navigation("LegalRepresentativesProfile");

                    b.Navigation("LicenseInventoryLimits");

                    b.Navigation("LicenseProfile");

                    b.Navigation("LookupSet");

                    b.Navigation("ManufacturerMaster");

                    b.Navigation("PermitDetailsProfile");

                    b.Navigation("PermitInventoryLimits");

                    b.Navigation("PractiseProfile");

                    b.Navigation("SafetyResponsibleOfficersProfile");
                });

            modelBuilder.Entity("PRJ.Domain.Entities.PermitDetailsProfile", b =>
                {
                    b.HasOne("PRJ.Domain.Entities.FacilityProfile", "FacilityProfile")
                        .WithMany()
                        .HasForeignKey("FacilityId");

                    b.HasOne("PRJ.Domain.Entities.LicenseProfile", "LicenseProfile")
                        .WithMany()
                        .HasForeignKey("LicenseId");

                    b.HasOne("PRJ.Domain.Entities.LookupSetTerm", "PermitTypeLookup")
                        .WithMany()
                        .HasForeignKey("PermitType");

                    b.Navigation("FacilityProfile");

                    b.Navigation("LicenseProfile");

                    b.Navigation("PermitTypeLookup");
                });

            modelBuilder.Entity("PRJ.Domain.Entities.PractiseProfile", b =>
                {
                    b.HasOne("PRJ.Domain.Entities.PermitDetailsProfile", "PermitDetailsProfile")
                        .WithMany()
                        .HasForeignKey("PermitDetailsId");

                    b.Navigation("PermitDetailsProfile");
                });

            modelBuilder.Entity("PRJ.Domain.Entities.RadiationGeneratorsProfile", b =>
                {
                    b.HasOne("PRJ.Domain.Entities.EntityProfile", "EntityProfile")
                        .WithMany()
                        .HasForeignKey("EntityId");

                    b.HasOne("PRJ.Domain.Entities.LookupSet", "LookupSet")
                        .WithMany()
                        .HasForeignKey("EquipmentType");

                    b.HasOne("PRJ.Domain.Entities.FacilityProfile", "FacilityProfile")
                        .WithMany()
                        .HasForeignKey("FacilityId");

                    b.HasOne("PRJ.Domain.Entities.LegalRepresentativesProfile", "LegalRepresentativesProfile")
                        .WithMany()
                        .HasForeignKey("LegalRepresentativesId");

                    b.HasOne("PRJ.Domain.Entities.LicenseProfile", "LicenseProfile")
                        .WithMany()
                        .HasForeignKey("LicenseId");

                    b.HasOne("PRJ.Domain.Entities.AmanIntegrationEntities.LicenseInventoryLimits", "LicenseInventoryLimits")
                        .WithMany()
                        .HasForeignKey("LicenseInventoryId");

                    b.HasOne("PRJ.Domain.Entities.ManufacturerMaster", "ManufacturerMaster")
                        .WithMany()
                        .HasForeignKey("ManufacturerId");

                    b.HasOne("PRJ.Domain.Entities.AmanIntegrationEntities.PermitInventoryLimits", "PermitInventoryLimits")
                        .WithMany()
                        .HasForeignKey("PermitInventoryId");

                    b.HasOne("PRJ.Domain.Entities.PermitDetailsProfile", "PermitDetailsProfile")
                        .WithMany()
                        .HasForeignKey("PermitdetailsId");

                    b.HasOne("PRJ.Domain.Entities.PractiseProfile", "PractiseProfile")
                        .WithMany()
                        .HasForeignKey("PractiseId");

                    b.HasOne("PRJ.Domain.Entities.SafetyResponsibleOfficersProfile", "SafetyResponsibleOfficersProfile")
                        .WithMany()
                        .HasForeignKey("SROId");

                    b.Navigation("EntityProfile");

                    b.Navigation("FacilityProfile");

                    b.Navigation("LegalRepresentativesProfile");

                    b.Navigation("LicenseInventoryLimits");

                    b.Navigation("LicenseProfile");

                    b.Navigation("LookupSet");

                    b.Navigation("ManufacturerMaster");

                    b.Navigation("PermitDetailsProfile");

                    b.Navigation("PermitInventoryLimits");

                    b.Navigation("PractiseProfile");

                    b.Navigation("SafetyResponsibleOfficersProfile");
                });

            modelBuilder.Entity("PRJ.Domain.Entities.Radionuclides", b =>
                {
                    b.HasOne("PRJ.Domain.Entities.LookupSetTerm", "ExemptionValueUnit")
                        .WithMany()
                        .HasForeignKey("ExemptionValueUnitId");

                    b.HasOne("PRJ.Domain.Entities.LookupSetTerm", "HalfLifeUnit")
                        .WithMany()
                        .HasForeignKey("HalfLifeUnitId");

                    b.Navigation("ExemptionValueUnit");

                    b.Navigation("HalfLifeUnit");
                });

            modelBuilder.Entity("PRJ.Domain.Entities.RelatedItemFiles", b =>
                {
                    b.HasOne("PRJ.Domain.Entities.RelatedItems", null)
                        .WithMany("RelatedItemFiles")
                        .HasForeignKey("Attachments");

                    b.HasOne("PRJ.Domain.Entities.RelatedItems", "RelatedItems")
                        .WithMany()
                        .HasForeignKey("RealtedItemCode");

                    b.Navigation("RelatedItems");
                });

            modelBuilder.Entity("PRJ.Domain.Entities.RelatedItems", b =>
                {
                    b.HasOne("PRJ.Domain.Entities.LookupSetTerm", "ItemsCategoryLookup")
                        .WithMany()
                        .HasForeignKey("ItemCategory");

                    b.HasOne("PRJ.Domain.Entities.ManufacturerMaster", "ManufacturersLookup")
                        .WithMany()
                        .HasForeignKey("Manufacturer");

                    b.HasOne("PRJ.Domain.Entities.LookupSetTerm", "StatusLookup")
                        .WithMany()
                        .HasForeignKey("StatusID");

                    b.Navigation("ItemsCategoryLookup");

                    b.Navigation("ManufacturersLookup");

                    b.Navigation("StatusLookup");
                });

            modelBuilder.Entity("PRJ.Domain.Entities.TransactionAttachments", b =>
                {
                    b.HasOne("PRJ.Domain.Entities.TrnItemSource", "TrnItemSource")
                        .WithMany("TransactionAttactcments")
                        .HasForeignKey("TrnSourceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TrnItemSource");
                });

            modelBuilder.Entity("PRJ.Domain.Entities.TransactionHeader", b =>
                {
                    b.HasOne("PRJ.Domain.Entities.TransactionTypeMaster", "TransactionTypeMaster")
                        .WithMany()
                        .HasForeignKey("TransactionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TransactionTypeMaster");
                });

            modelBuilder.Entity("PRJ.Domain.Entities.TrnItemSource", b =>
                {
                    b.HasOne("PRJ.Domain.Entities.LookupSetTerm", "AssociatedEquipmentLookup")
                        .WithMany()
                        .HasForeignKey("AssociatedEquipment");

                    b.HasOne("PRJ.Domain.Entities.EntityProfile", "EntityProfile")
                        .WithMany()
                        .HasForeignKey("EntityId");

                    b.HasOne("PRJ.Domain.Entities.FacilityProfile", "FacilityProfile")
                        .WithMany()
                        .HasForeignKey("FacilityId");

                    b.HasOne("PRJ.Domain.Entities.LookupSetTerm", "InitialMassUnitLookup")
                        .WithMany()
                        .HasForeignKey("InitialMassUnit");

                    b.HasOne("PRJ.Domain.Entities.LegalRepresentativesProfile", "LegalRepresentativesProfile")
                        .WithMany()
                        .HasForeignKey("LegalRepresentativesId");

                    b.HasOne("PRJ.Domain.Entities.LicenseProfile", "LicenseProfile")
                        .WithMany()
                        .HasForeignKey("LicenseId");

                    b.HasOne("PRJ.Domain.Entities.AmanIntegrationEntities.LicenseInventoryLimits", "LicenseInventoryLimits")
                        .WithMany()
                        .HasForeignKey("LicenseInventoryId");

                    b.HasOne("PRJ.Domain.Entities.LookupSetTerm", "ManufacturerCountryLookup")
                        .WithMany()
                        .HasForeignKey("ManufacturerCountryId");

                    b.HasOne("PRJ.Domain.Entities.LookupSetTerm", "ManufacturerLookup")
                        .WithMany()
                        .HasForeignKey("ManufacturerId");

                    b.HasOne("PRJ.Domain.Entities.LookupSetTerm", "NuclearMaterialLookup")
                        .WithMany()
                        .HasForeignKey("NuclearMaterial");

                    b.HasOne("PRJ.Domain.Entities.AmanIntegrationEntities.PermitInventoryLimits", "PermitInventoryLimits")
                        .WithMany()
                        .HasForeignKey("PermitInventoryId");

                    b.HasOne("PRJ.Domain.Entities.PermitDetailsProfile", "PermitDetailsProfile")
                        .WithMany()
                        .HasForeignKey("PermitdetailsId");

                    b.HasOne("PRJ.Domain.Entities.LookupSetTerm", "PhysicalFormLookup")
                        .WithMany()
                        .HasForeignKey("PhysicalForm");

                    b.HasOne("PRJ.Domain.Entities.PractiseProfile", "PractiseProfile")
                        .WithMany()
                        .HasForeignKey("PractiseId");

                    b.HasOne("PRJ.Domain.Entities.SafetyResponsibleOfficersProfile", "SafetyResponsibleOfficersProfile")
                        .WithMany()
                        .HasForeignKey("SROId");

                    b.HasOne("PRJ.Domain.Entities.LookupSetTerm", "SourceActivityLookup")
                        .WithMany()
                        .HasForeignKey("SourceActivityUnit");

                    b.HasOne("PRJ.Domain.Entities.LookupSetTerm", "SourceCategoryLookup")
                        .WithMany()
                        .HasForeignKey("SourceCategory");

                    b.HasOne("PRJ.Domain.Entities.LookupSetTerm", "SourceTypeLookup")
                        .WithMany()
                        .HasForeignKey("SourceType");

                    b.HasOne("PRJ.Domain.Entities.LookupSetTerm", "StatusLookup")
                        .WithMany()
                        .HasForeignKey("Status");

                    b.HasOne("PRJ.Domain.Entities.TransactionHeader", "TransactionsHeader")
                        .WithMany()
                        .HasForeignKey("TransactionHeaderId");

                    b.Navigation("AssociatedEquipmentLookup");

                    b.Navigation("EntityProfile");

                    b.Navigation("FacilityProfile");

                    b.Navigation("InitialMassUnitLookup");

                    b.Navigation("LegalRepresentativesProfile");

                    b.Navigation("LicenseInventoryLimits");

                    b.Navigation("LicenseProfile");

                    b.Navigation("ManufacturerCountryLookup");

                    b.Navigation("ManufacturerLookup");

                    b.Navigation("NuclearMaterialLookup");

                    b.Navigation("PermitDetailsProfile");

                    b.Navigation("PermitInventoryLimits");

                    b.Navigation("PhysicalFormLookup");

                    b.Navigation("PractiseProfile");

                    b.Navigation("SafetyResponsibleOfficersProfile");

                    b.Navigation("SourceActivityLookup");

                    b.Navigation("SourceCategoryLookup");

                    b.Navigation("SourceTypeLookup");

                    b.Navigation("StatusLookup");

                    b.Navigation("TransactionsHeader");
                });

            modelBuilder.Entity("PRJ.Domain.Entities.TrnItemSourceHistory", b =>
                {
                    b.HasOne("PRJ.Domain.Entities.ItemSourceProfile", "ItemSourceProfile")
                        .WithMany("TrnItemSourceHistory")
                        .HasForeignKey("TransactionId");

                    b.HasOne("PRJ.Domain.Entities.TransactionTypeMaster", "TransactionTypeMaster")
                        .WithMany()
                        .HasForeignKey("TransactionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ItemSourceProfile");

                    b.Navigation("TransactionTypeMaster");
                });

            modelBuilder.Entity("PRJ.Domain.Entities.TrnItemSourceRadionuclides", b =>
                {
                    b.HasOne("PRJ.Domain.Entities.LookupSetTerm", "InitialActivityUnitLookup")
                        .WithMany()
                        .HasForeignKey("InitialActivityUnit");

                    b.HasOne("PRJ.Domain.Entities.Radionuclides", "Radionuclides")
                        .WithMany()
                        .HasForeignKey("RadionulcideId");

                    b.HasOne("PRJ.Domain.Entities.TrnItemSource", "TrnItemSource")
                        .WithMany("TrnItemSourceRadionuclides")
                        .HasForeignKey("TrnSourceID");

                    b.Navigation("InitialActivityUnitLookup");

                    b.Navigation("Radionuclides");

                    b.Navigation("TrnItemSource");
                });

            modelBuilder.Entity("PRJ.Domain.Entities.Workers", b =>
                {
                    b.HasOne("PRJ.Domain.Entities.FacilityProfile", "FacilityProfile")
                        .WithMany()
                        .HasForeignKey("FacilityId");

                    b.HasOne("PRJ.Domain.Entities.BasCountries", "BasCountries")
                        .WithMany()
                        .HasForeignKey("Nationality");

                    b.HasOne("PRJ.Domain.Entities.LookupSetTerm", "LookupSetTerm")
                        .WithMany()
                        .HasForeignKey("Status");

                    b.Navigation("BasCountries");

                    b.Navigation("FacilityProfile");

                    b.Navigation("LookupSetTerm");
                });

            modelBuilder.Entity("PRJ.Domain.Entities.AmanIntegrationEntities.LicenseInventoryLimits", b =>
                {
                    b.Navigation("Generators");

                    b.Navigation("SealedSources");

                    b.Navigation("UnSealedSources");

                    b.Navigation("VUnSealedSources");
                });

            modelBuilder.Entity("PRJ.Domain.Entities.AmanIntegrationEntities.PermitInventoryLimits", b =>
                {
                    b.Navigation("Generators");

                    b.Navigation("NuclearSources");

                    b.Navigation("SealedSources");

                    b.Navigation("UnSealedSources");
                });

            modelBuilder.Entity("PRJ.Domain.Entities.Billing.ItemHierarchyStructure", b =>
                {
                    b.Navigation("serviceItemProfiles");
                });

            modelBuilder.Entity("PRJ.Domain.Entities.BillingServiceTrn.BillingServiceTrnHeader", b =>
                {
                    b.Navigation("BillingServiceTrnDetails");
                });

            modelBuilder.Entity("PRJ.Domain.Entities.InternalRole", b =>
                {
                    b.Navigation("InternalScreenRoles");
                });

            modelBuilder.Entity("PRJ.Domain.Entities.InternalScreen", b =>
                {
                    b.Navigation("InternalScreenFields");

                    b.Navigation("InternalScreenRoles");
                });

            modelBuilder.Entity("PRJ.Domain.Entities.InternalScreenField", b =>
                {
                    b.Navigation("InternalFieldPermissions");
                });

            modelBuilder.Entity("PRJ.Domain.Entities.ItemSourceProfile", b =>
                {
                    b.Navigation("ItemSourceFiles");

                    b.Navigation("ItemSourceMsgs");

                    b.Navigation("ItemSourceRadionulcides");

                    b.Navigation("ItemSourceStatusHistories");

                    b.Navigation("TrnItemSourceHistory");
                });

            modelBuilder.Entity("PRJ.Domain.Entities.ListOfValue", b =>
                {
                    b.Navigation("InternalScreenFields");
                });

            modelBuilder.Entity("PRJ.Domain.Entities.LookupSet", b =>
                {
                    b.Navigation("InternalScreenFields");

                    b.Navigation("LookupSetTerms");
                });

            modelBuilder.Entity("PRJ.Domain.Entities.NuclearMaterial.NuclearMaterial", b =>
                {
                    b.Navigation("ItemSourceProfile");

                    b.Navigation("NuclearMaterialElements");

                    b.Navigation("NuclearMaterialFiles");
                });

            modelBuilder.Entity("PRJ.Domain.Entities.NuclearMaterial.NuclearMaterialElement", b =>
                {
                    b.Navigation("NuclearMaterialRadionulcides");
                });

            modelBuilder.Entity("PRJ.Domain.Entities.RelatedItems", b =>
                {
                    b.Navigation("RelatedItemFiles");
                });

            modelBuilder.Entity("PRJ.Domain.Entities.TrnItemSource", b =>
                {
                    b.Navigation("ItemSourceProfile");

                    b.Navigation("TransactionAttactcments");

                    b.Navigation("TrnItemSourceRadionuclides");
                });
#pragma warning restore 612, 618
        }
    }
}
