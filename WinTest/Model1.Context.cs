//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WinTest
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class InternalEServicesDBEntities : DbContext
    {
        public InternalEServicesDBEntities()
            : base("name=InternalEServicesDBEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<CampaignAttachment> CampaignAttachments { get; set; }
        public virtual DbSet<CampaignLink> CampaignLinks { get; set; }
        public virtual DbSet<Campaing> Campaings { get; set; }
        public virtual DbSet<CustomCompaignMail> CustomCompaignMails { get; set; }
        public virtual DbSet<EmailListContent> EmailListContents { get; set; }
        public virtual DbSet<EmailList> EmailLists { get; set; }
        public virtual DbSet<AuthorizedDepartment> AuthorizedDepartments { get; set; }
        public virtual DbSet<SASOArea> SASOAreas { get; set; }
        public virtual DbSet<SASOCountry> SASOCountries { get; set; }
        public virtual DbSet<SASOEmbassyPlace> SASOEmbassyPlaces { get; set; }
        public virtual DbSet<SASOErrorLogger> SASOErrorLoggers { get; set; }
        public virtual DbSet<ServiceConfig> ServiceConfigs { get; set; }
        public virtual DbSet<ServicesStatus> ServicesStatuses { get; set; }
        public virtual DbSet<UsersInDepartment> UsersInDepartments { get; set; }
        public virtual DbSet<AvailableDevice> AvailableDevices { get; set; }
        public virtual DbSet<DataSimService> DataSimServices { get; set; }
        public virtual DbSet<SimCardRequestAction> SimCardRequestActions { get; set; }
        public virtual DbSet<SimCardRequest> SimCardRequests { get; set; }
        public virtual DbSet<SimCardRequestSpecialist> SimCardRequestSpecialists { get; set; }
        public virtual DbSet<SimRequestService> SimRequestServices { get; set; }
        public virtual DbSet<UtilitiyType> UtilitiyTypes { get; set; }
        public virtual DbSet<Activity> Activities { get; set; }
        public virtual DbSet<ActivityRequest> ActivityRequests { get; set; }
        public virtual DbSet<Agency> Agencies { get; set; }
        public virtual DbSet<AgencyLicensor> AgencyLicensors { get; set; }
        public virtual DbSet<AgencyRelated> AgencyRelateds { get; set; }
        public virtual DbSet<AgencySupervisor> AgencySupervisors { get; set; }
        public virtual DbSet<Announcement> Announcements { get; set; }
        public virtual DbSet<AnnouncementsDepartment> AnnouncementsDepartments { get; set; }
        public virtual DbSet<Branch> Branches { get; set; }
        public virtual DbSet<CarInfo> CarInfoes { get; set; }
        public virtual DbSet<CarMainitnanceType> CarMainitnanceTypes { get; set; }
        public virtual DbSet<CarMaintinanceBillsAttachment> CarMaintinanceBillsAttachments { get; set; }
        public virtual DbSet<CarMaintinanceCard> CarMaintinanceCards { get; set; }
        public virtual DbSet<CarMaintinanceRequest> CarMaintinanceRequests { get; set; }
        public virtual DbSet<CarMaintinanceRequestTask> CarMaintinanceRequestTasks { get; set; }
        public virtual DbSet<CarRequest> CarRequests { get; set; }
        public virtual DbSet<CarRequestTask> CarRequestTasks { get; set; }
        public virtual DbSet<Chapter> Chapters { get; set; }
        public virtual DbSet<City> Cities { get; set; }
        public virtual DbSet<EmailSenderLog> EmailSenderLogs { get; set; }
        public virtual DbSet<EmpIdentyCertificate> EmpIdentyCertificates { get; set; }
        public virtual DbSet<EmployeeInRole> EmployeeInRoles { get; set; }
        public virtual DbSet<EndorsementResult> EndorsementResults { get; set; }
        public virtual DbSet<Endorsement> Endorsements { get; set; }
        public virtual DbSet<EServicesTabContent> EServicesTabContents { get; set; }
        public virtual DbSet<EServicesTab> EServicesTabs { get; set; }
        public virtual DbSet<GuidesPolicy> GuidesPolicies { get; set; }
        public virtual DbSet<HallRoom> HallRooms { get; set; }
        public virtual DbSet<Poll> Polls { get; set; }
        public virtual DbSet<PollsAnswer> PollsAnswers { get; set; }
        public virtual DbSet<PollsQuestion> PollsQuestions { get; set; }
        public virtual DbSet<ProfileOfUser> ProfileOfUsers { get; set; }
        public virtual DbSet<Role> Roles { get; set; }
        public virtual DbSet<RolesUser> RolesUsers { get; set; }
        public virtual DbSet<RSSNew> RSSNews { get; set; }
        public virtual DbSet<SASONew> SASONews { get; set; }
        public virtual DbSet<SASONewsAttachemnt> SASONewsAttachemnts { get; set; }
        public virtual DbSet<ServiceList> ServiceLists { get; set; }
        public virtual DbSet<ServiceLog> ServiceLogs { get; set; }
        public virtual DbSet<ServiceRole> ServiceRoles { get; set; }
        public virtual DbSet<ServicesSetting> ServicesSettings { get; set; }
        public virtual DbSet<ServiceType> ServiceTypes { get; set; }
        public virtual DbSet<SocialNew> SocialNews { get; set; }
        public virtual DbSet<SocialNewsAttachemnt> SocialNewsAttachemnts { get; set; }
        public virtual DbSet<Status> Status { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<TempFile> TempFiles { get; set; }
        public virtual DbSet<updEmployeeAction> updEmployeeActions { get; set; }
        public virtual DbSet<updEmployeeApproval> updEmployeeApprovals { get; set; }
        public virtual DbSet<updEmployeeBasic> updEmployeeBasics { get; set; }
        public virtual DbSet<updEmployeeExperience> updEmployeeExperiences { get; set; }
        public virtual DbSet<updEmployeeExperienceDetail> updEmployeeExperienceDetails { get; set; }
        public virtual DbSet<updEmployeeFamilyMember> updEmployeeFamilyMembers { get; set; }
        public virtual DbSet<updEmployeeFamilyMembersDetail> updEmployeeFamilyMembersDetails { get; set; }
        public virtual DbSet<updEmployeePhoto> updEmployeePhotoes { get; set; }
        public virtual DbSet<updEmployeeQualificationDetail> updEmployeeQualificationDetails { get; set; }
        public virtual DbSet<updEmployeeQualificationinfo> updEmployeeQualificationinfoes { get; set; }
        public virtual DbSet<updEmployeeSetting> updEmployeeSettings { get; set; }
        public virtual DbSet<updEmployeeTrainingDetail> updEmployeeTrainingDetails { get; set; }
        public virtual DbSet<updEmployeeTrainingInfo> updEmployeeTrainingInfoes { get; set; }
        public virtual DbSet<UserFavorite> UserFavorites { get; set; }
        public virtual DbSet<Vacation> Vacations { get; set; }
        public virtual DbSet<EmployeeEvaluation> EmployeeEvaluations { get; set; }
        public virtual DbSet<EvaluationAction> EvaluationActions { get; set; }
        public virtual DbSet<EvaluationException> EvaluationExceptions { get; set; }
        public virtual DbSet<EvaluationGadarat> EvaluationGadarats { get; set; }
        public virtual DbSet<EvaluationGadarhDegree> EvaluationGadarhDegrees { get; set; }
        public virtual DbSet<EvaluationGoalDegree> EvaluationGoalDegrees { get; set; }
        public virtual DbSet<EvaluationGoalNote> EvaluationGoalNotes { get; set; }
        public virtual DbSet<EvaluationGoal> EvaluationGoals { get; set; }
        public virtual DbSet<EvaluationGoalVersion> EvaluationGoalVersions { get; set; }
        public virtual DbSet<EvaluationPlan> EvaluationPlans { get; set; }
        public virtual DbSet<EvaluationRole> EvaluationRoles { get; set; }
        public virtual DbSet<EvaluationRoleUser> EvaluationRoleUsers { get; set; }
        public virtual DbSet<EvaluationStatus> EvaluationStatuses { get; set; }
        public virtual DbSet<GadaratNote> GadaratNotes { get; set; }
        public virtual DbSet<GadaratType> GadaratTypes { get; set; }
        public virtual DbSet<GoalType> GoalTypes { get; set; }
        public virtual DbSet<RoomAuthorized> RoomAuthorizeds { get; set; }
        public virtual DbSet<RoomReservationAttandaceRequest> RoomReservationAttandaceRequests { get; set; }
        public virtual DbSet<RoomReservationPublicRelationsTeam> RoomReservationPublicRelationsTeams { get; set; }
        public virtual DbSet<RoomReservationRequestAction> RoomReservationRequestActions { get; set; }
        public virtual DbSet<RoomReservationRequest> RoomReservationRequests { get; set; }
        public virtual DbSet<RoomReservationRequestTask> RoomReservationRequestTasks { get; set; }
        public virtual DbSet<RoomReservationSpeekersRequest> RoomReservationSpeekersRequests { get; set; }
        public virtual DbSet<Room> Rooms { get; set; }
        public virtual DbSet<RoomsTaskDepartment> RoomsTaskDepartments { get; set; }
        public virtual DbSet<RoomTask> RoomTasks { get; set; }
        public virtual DbSet<AuthorizedDepartments1> AuthorizedDepartments1 { get; set; }
        public virtual DbSet<MaintenanceBuilding> MaintenanceBuildings { get; set; }
        public virtual DbSet<MaintenanceFloor> MaintenanceFloors { get; set; }
        public virtual DbSet<MaintenanceRejectReason> MaintenanceRejectReasons { get; set; }
        public virtual DbSet<MaintenanceRequestAction> MaintenanceRequestActions { get; set; }
        public virtual DbSet<MaintenanceRequest> MaintenanceRequests { get; set; }
        public virtual DbSet<MaintenanceService> MaintenanceServices { get; set; }
        public virtual DbSet<MaintenanceStatus> MaintenanceStatuses { get; set; }
        public virtual DbSet<MaintenanceSubstance> MaintenanceSubstances { get; set; }
        public virtual DbSet<MaintenanceSuite> MaintenanceSuites { get; set; }
        public virtual DbSet<RequestsAttachment> RequestsAttachments { get; set; }
        public virtual DbSet<RequestSubstance> RequestSubstances { get; set; }
        public virtual DbSet<UsersInDepartments1> UsersInDepartments1 { get; set; }
        public virtual DbSet<Category> Categories { get; set; }
        public virtual DbSet<CustomerInformation> CustomerInformations { get; set; }
        public virtual DbSet<Membership> Memberships { get; set; }
        public virtual DbSet<MembershipDiscount> MembershipDiscounts { get; set; }
        public virtual DbSet<MembershipFeature> MembershipFeatures { get; set; }
        public virtual DbSet<PlanDiscount> PlanDiscounts { get; set; }
        public virtual DbSet<PlanFeature> PlanFeatures { get; set; }
        public virtual DbSet<PlansGeneralInformation> PlansGeneralInformations { get; set; }
        public virtual DbSet<SubCategory> SubCategories { get; set; }
        public virtual DbSet<MessageServiceLog> MessageServiceLogs { get; set; }
        public virtual DbSet<SurveyActionPoll> SurveyActionPolls { get; set; }
        public virtual DbSet<SurveyAnswer> SurveyAnswers { get; set; }
        public virtual DbSet<SurveyQuestion> SurveyQuestions { get; set; }
        public virtual DbSet<SurveyRelatedUser> SurveyRelatedUsers { get; set; }
        public virtual DbSet<Survey> Surveys { get; set; }
        public virtual DbSet<TranslationRequestAction> TranslationRequestActions { get; set; }
        public virtual DbSet<TranslationRequest> TranslationRequests { get; set; }
        public virtual DbSet<TranslationServiceCategory> TranslationServiceCategories { get; set; }
        public virtual DbSet<TranslationService> TranslationServices { get; set; }
        public virtual DbSet<TranslationStatus> TranslationStatuses { get; set; }
        public virtual DbSet<TrRequestsAttachment> TrRequestsAttachments { get; set; }
        public virtual DbSet<TRRequestService> TRRequestServices { get; set; }
        public virtual DbSet<TrRequestSpecialist> TrRequestSpecialists { get; set; }
        public virtual DbSet<VisaRequestAction> VisaRequestActions { get; set; }
        public virtual DbSet<VisaRequestAttachment> VisaRequestAttachments { get; set; }
        public virtual DbSet<VisaRequestCmopanion> VisaRequestCmopanions { get; set; }
        public virtual DbSet<VisaRequest> VisaRequests { get; set; }
        public virtual DbSet<VisaType> VisaTypes { get; set; }
        public virtual DbSet<AllRequest> AllRequests { get; set; }
        public virtual DbSet<UsersData> UsersDatas { get; set; }
        public virtual DbSet<HCM_ASSESMENT_CHARTER> HCM_ASSESMENT_CHARTER { get; set; }
        public virtual DbSet<HCM_ASSESMENT_CHARTER_EVAL> HCM_ASSESMENT_CHARTER_EVAL { get; set; }
        public virtual DbSet<HCM_ASSESMENT_COMPETENCIES> HCM_ASSESMENT_COMPETENCIES { get; set; }
        public virtual DbSet<HCM_ASSESMENT_GOAL> HCM_ASSESMENT_GOAL { get; set; }
        public virtual DbSet<HCM_ASSESMENT_GOAL_NOTES> HCM_ASSESMENT_GOAL_NOTES { get; set; }
        public virtual DbSet<HCM_ASSESMENT_ROLE> HCM_ASSESMENT_ROLE { get; set; }
        public virtual DbSet<HCM_ASSESMENT_ROLE_USER> HCM_ASSESMENT_ROLE_USER { get; set; }
        public virtual DbSet<HCM_ASSESMENT_STATUS> HCM_ASSESMENT_STATUS { get; set; }
        public virtual DbSet<HCM_ASSESMENT_TASK> HCM_ASSESMENT_TASK { get; set; }
        public virtual DbSet<HCM_ASSESSMENT_COMPETENCY_DTL> HCM_ASSESSMENT_COMPETENCY_DTL { get; set; }
        public virtual DbSet<LiveTemp_RequestSubstances> LiveTemp_RequestSubstances { get; set; }
        public virtual DbSet<Temp_MaintenanceSubstances> Temp_MaintenanceSubstances { get; set; }
        public virtual DbSet<vm_availabledevices> vm_availabledevices { get; set; }
    
        public virtual ObjectResult<Nullable<int>> GetEmployeeUpdateInfoStatus(Nullable<int> empNo)
        {
            var empNoParameter = empNo.HasValue ?
                new ObjectParameter("EmpNo", empNo) :
                new ObjectParameter("EmpNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetEmployeeUpdateInfoStatus", empNoParameter);
        }
    
        public virtual ObjectResult<GetRoomRequestIntersections_Result> GetRoomRequestIntersections(string dateFrom, string dateTo, string dateFromTime, string dateToTime, Nullable<int> roomId)
        {
            var dateFromParameter = dateFrom != null ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(string));
    
            var dateToParameter = dateTo != null ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(string));
    
            var dateFromTimeParameter = dateFromTime != null ?
                new ObjectParameter("DateFromTime", dateFromTime) :
                new ObjectParameter("DateFromTime", typeof(string));
    
            var dateToTimeParameter = dateToTime != null ?
                new ObjectParameter("DateToTime", dateToTime) :
                new ObjectParameter("DateToTime", typeof(string));
    
            var roomIdParameter = roomId.HasValue ?
                new ObjectParameter("RoomId", roomId) :
                new ObjectParameter("RoomId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetRoomRequestIntersections_Result>("GetRoomRequestIntersections", dateFromParameter, dateToParameter, dateFromTimeParameter, dateToTimeParameter, roomIdParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_Mk(Nullable<int> page, Nullable<int> size, string sort, ObjectParameter totalrow)
        {
            var pageParameter = page.HasValue ?
                new ObjectParameter("page", page) :
                new ObjectParameter("page", typeof(int));
    
            var sizeParameter = size.HasValue ?
                new ObjectParameter("size", size) :
                new ObjectParameter("size", typeof(int));
    
            var sortParameter = sort != null ?
                new ObjectParameter("sort", sort) :
                new ObjectParameter("sort", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Mk", pageParameter, sizeParameter, sortParameter, totalrow);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int UpdateCompletedRequestToClosed()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateCompletedRequestToClosed");
        }
    }
}
